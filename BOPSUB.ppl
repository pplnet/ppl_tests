** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operacion binaria: resta

** Los tests con operador '^' por el momento no compilan en v7.

&fechaPplObj := Fecha('02/01/2020')
&numero := 10
&datetime := Fecha('04/01/2020')

&ErrMsgSubIntStr := 'No se puede realizar una operacion de resta entre System.Int32 y System.String'
&ErrMsgSubIntBol := 'No se puede realizar una operacion de resta entre System.Int32 y System.Boolean'
&ErrMsgSubDblStr := 'No se puede realizar una operacion de resta entre System.Double y System.String'
&ErrMsgSubDblBol := 'No se puede realizar una operacion de resta entre System.Double y System.Boolean'
&ErrMsgSubStrDbl := 'No se puede realizar una operacion de resta entre System.String y System.Double'
&ErrMsgSubStrStr := 'No se puede realizar una operacion de resta entre System.String y System.String'
&ErrMsgSubStrInt := 'No se puede realizar una operacion de resta entre System.String y System.Int32'
&ErrMsgSubStrDbl := 'No se puede realizar una operacion de resta entre System.String y System.Double'
&ErrMsgSubStrBol := 'No se puede realizar una operacion de resta entre System.String y System.Boolean'
&ErrMsgSubDatStr := 'No se puede realizar una operacion de resta entre System.DateTime y System.String'
&ErrMsgSubDatBol := 'No se puede realizar una operacion de resta entre System.DateTime y System.Boolean'

test('resta', -> {
  assertEq(1,   2 - 1)
  assertEq(1,   1 - 0)
  assertEq(-1,  9 - 10)
  assertEq(-1,  9 - &numero)
  assertEq(0,   1 - 1)
  assertEq(1.1, 3 - 1.9)
  assertEq(1.1, 2.2 - 1.1)
  assertEq(5,   Int(10) - Int(5))
  
  #ifdef V6
  assertEq(3, 2^2 - 1)
  assertEq(5, 2^2 - (-(1)))
  #endif
  
  assertEq(9,   Num('10')  - 1)
  assertEq(1,   Num('1.5') - Num('0.5'))
  assertEq(0.5, Num('1.5') - Num('1'))
  assertEq(1,   Dbl(1.5) - Dbl(0.5))

  assertEq( 1, NewFbnObj('1') * 2 - 1)
  assertEq(-1, NewFbnObj('1') * 0 - 1)
  assertEq( 1, NewFbnObj('3') - 1 * 2)
  assertEq( 1, NewFbnObj('4') - 3)
  assertEq(-3, NewPplObj('2',NO,SI) - 3)
  assertEq( 1, NewPplObj('4',SI,NO) - 3)
  assertEq(-3, NewValObj('2') - 3)
  
  assertEq(-3, NewFbnObj('')    - 3)
  assertEq( 2, NewFbnObj('5')   - Int(3))
  assertEq( 2, NewFbnObj('3.5') - Dbl(1.5))
  assertEq( 4, NewFbnObj('5')   - Num('1'))
  assertEq( 2, NewFbnObj('3.5') - Decimal(1.5))
  assertEq( 2, Int(3)       - NewFbnObj('1'))
  assertEq( 2, Dbl(3.5)     - NewFbnObj('1.5'))
  assertEq( 2, Num('3')     - NewFbnObj('1'))
  assertEq( 2, Decimal(3.5) - NewFbnObj('1.5'))
  
  assertEq(2, Decimal(4) - Decimal(2))
  assertEq(1, Decimal(3) - 2)
  assertEq(1, Decimal(3) - Int(2))
  assertEq(1, Decimal(3) - Dbl(2))
  assertEq(1, Decimal(3) - Num('2'))
  assertEq(1,   3        - Decimal(2))
  assertEq(1,   Int(3)   - Decimal(2))
  assertEq(1,   Dbl(3)   - Decimal(2))
  assertEq(1,   Num('3') - Decimal(2))
  assertEq(1.5, Dbl(3.5) - Decimal(2))
  
  assertError(&ErrMsgSubIntStr, -> 3 - '1')
  assertError(&ErrMsgSubIntStr, -> 3 - 'foo')
  assertError(&ErrMsgSubIntStr, -> 3 - 'NaN')
  assertError(&ErrMsgSubIntStr, -> 3 - '')
  assertError(&ErrMsgSubIntBol, -> 3 - SI)
  
  assertError(&ErrMsgSubDblStr, -> Dbl(3.5) - '1')
  assertError(&ErrMsgSubDblStr, -> Dbl(3.5) - 'foo')
  assertError(&ErrMsgSubDblStr, -> Dbl(3.5) - 'NaN')
  assertError(&ErrMsgSubDblStr, -> Dbl(3.5) - '')
  assertError(&ErrMsgSubDblBol, -> Dbl(3.5) - SI)
  assertError(&ErrMsgSubStrDbl, -> 'NaN' - Dbl(3.5))
  assertError(&ErrMsgSubStrStr, -> 'NaN' - 'NaN')
  
  assertError(&ErrMsgSubStrInt, -> '1' - 1)
  assertError(&ErrMsgSubStrStr, -> '1' - '1')
  assertError(&ErrMsgSubStrDbl, -> '1.1' - 1.1)
  assertError(&ErrMsgSubStrBol, -> '1' - SI)
  
  assertEq(&fechaPplObj, Fecha('03/01/2020') - 1)
  assertEq(Fecha('02/01/2020'), Fecha('03/01/2020') - 1)
  assertEq(30, Fecha('31/01/2015') - Fecha('01/01/2015'))
  
  &datetime2 := &datetime - 1.5
  assertEq(Fecha('02/01/2020'), &datetime2.get_Date)
  assertEq(0, &datetime.get_Hour)
  assertEq(12, &datetime2.get_Hour)
  
  &datetime2 := &datetime2 + 0.6
  assertEq(Fecha('03/01/2020'), &datetime2.get_Date)
  
  &datetime3 := 1.5 - &datetime
  assertEq(-43832.5, &datetime3)
  assertEq('12:00:00',Hora(&datetime3))
  
  &datetime3 := 1 - &datetime
  assertEq(-43833, &datetime3)
  assertEq('00:00:00',Hora(&datetime3))
  
  ** No toma la property Hour
  *assertEq('12',Fecha(&datetime3).get_Hour)
  *assertEq('12',Dat(&datetime3).get_Hour)
  
  assertError(-> &datetime3.get_Hour)
  assertError(-> &datetime - '1')
  assertError(-> '1' - &datetime)
  
  assertError(&ErrMsgSubDatStr, -> Fecha('31/01/2015') - '1')
  assertError(&ErrMsgSubDatBol, -> fecha('31/01/2015') - SI)
  
  * Si bien no falla el test, no estaría andando porque no sería ese el mensaje de error
  assertError('Error', -> &datetime3.get_Hour)
  
  assertEq( 0, Val(Z:1) - DbNull)
  assertEq( 0, Val(Z:1) - Nil)
  assertEq(-1, Val(Z:1) - 1)
  assertEq( 0, NewFbnObj(DbNull) - DbNull)
  assertEq( 0, NewFbnObj(DbNull) - Nil)
  assertEq(-1, NewFbnObj(DbNull) - 1)
  assertEq(-1, NewFbnObj('str')  - 1)
  assertEq( 0, DbNull - NewFbnObj(DbNull))
  assertEq( 0, Nil    - NewFbnObj(DbNull))
  assertEq( 1, 1      - NewFbnObj(DbNull))
  assertEq( 5, 5      - NewValObj('5'))
  assertEq( 5, 5      - NewFbnObj('str'))
  assertEq(-5, NewValObj('5') - 5)
  assertEq( 1, NewFbnObj(1)      - NewFbnObj(DbNull))
  assertEq(-1, NewFbnObj(DbNull) - NewFbnObj(1))
  assertEq(-1, NewFbnObj('str')  - NewFbnObj(1))
  assertEq( 0, NewFbnObj('1')    - NewFbnObj(1))
  
  assertEq(  2, 2 - NewValObj('str'))
  assertEq(  2, 2 - NewValObj('1.5'))
  assertEq(  2, 2 - NewFbnObj('str'))
  assertEq(0.5, 2 - NewFbnObj('1.5'))
  assertEq( -1, NewValObj('str') - 1)
  assertEq( -1, NewValObj('1.5') - 1)
  assertEq( -1, NewFbnObj('str') - 1)
  assertEq(0.5, NewFbnObj('1.5') - 1)
})
