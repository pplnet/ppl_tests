*Ignore=V7
test("recorrer filas", ->{
    &lista := ||
    RecorrerFilas 1,3
      &lista.Add(filaciclo)
    Proximo
    assertEq(1, &lista.ItemAt(0))
    assertEq(2, &lista.ItemAt(1))
    assertEq(3, &lista.ItemAt(2))
    
    &lista2 := ||
    &fin := 3
    RecorrerFilas 1, &fin
      &lista2.Add(filaciclo)
    Proximo
    assertEq(1, &lista2.ItemAt(0))
    assertEq(2, &lista2.ItemAt(1))
    assertEq(3, &lista2.ItemAt(2))
    
    &lista3 := ||
    RecorrerFilas 1, &fin+1
      &lista3.Add(filaciclo)
    Proximo
    assertEq(1, &lista3.ItemAt(0))
    assertEq(2, &lista3.ItemAt(1))
    assertEq(3, &lista3.ItemAt(2))
    assertEq(4, &lista3.ItemAt(3))
    
    &lista4 := ||
    &fin := '3'
    RecorrerFilas 1, Num(&fin)
      &lista4.Add(filaciclo)
    Proximo
    assertEq(1, &lista4.ItemAt(0))
    assertEq(2, &lista4.ItemAt(1))
    assertEq(3, &lista4.ItemAt(2))
})

test("recorrer filas continue", ->{
    &lista5 := ||
    RecorrerFilas 1,3
      &lista5.Add(filaciclo)
      if filaciclo = 2
         continue
      endif
    Proximo
    assertEq(1, &lista5.ItemAt(0))
    assertEq(NULL, &lista5.ItemAt(1))
    assertEq(3, &lista5.ItemAt(2))
})

test("recorrer filas break", ->{
    &lista6 := ||
    RecorrerFilas 1,3
      &lista6.Add(filaciclo)
      Break
    Proximo
    assertEq(1, &lista6.ItemAt(0))
    assertEq(NULL, &lista6.ItemAt(1))
    assertEq(NULL, &lista6.ItemAt(2))
})
