test("recorrer", ->{
    &val := 0
    Recorrer&i 1, 10
      &val := &val + 1
      assertEq(&val, &i)
    Proximo
    assertEq(10, &val)
    
    &val := 0
    Recorrer&i 1, 10
      &val := &i
    Proximo
    assertEq(10, &val)
    
    &val := 0
    Recorrer&i 1,10,2
      &val := &val+1
    Proximo
    assertEq(5, &val)
    
    &val := 123
    Recorrer&i 1, 0
      &val := 456
    Proximo
    assertEq(123, &val)
    
    Recorrer&i 1, 1
      *comentario
      &val := 2
    Proximo
    assertEq(2, &val)
})

#ifdef V6
test("recorrer vacio", ->{
    Recorrer&i 1,10
      *comment
    Proximo
    assertPass()
    
    Recorrer&i 1,10
    Proximo
    assertPass()
})
#endif

#ifdef V7
test("recorrer con continue", ->{
    &val := 0
    Recorrer&i 1,3
      continue
      &val := &i
    Proximo
    assertEq(0, &val)
    
    &val := 0
    Recorrer&i 1,3
      if &i = 2
         continue
      endif
      &val := &i + 1
    Proximo
    assertEq(4, &val)
})
#endif

test("recorrer con break", ->{
    Recorrer&i 1,10
      &val := &i
      Break
    Proximo
    assertEq(1, &val)
    
    Recorrer&i 1,10
      if(&i = 5)
        break
      endif
      &val := &i
    Proximo
    assertEq(4, &val)
})

test("recorrer anidados", ->{
    &counter := 0
    &counter2 := 0
    &counter3 := 0
    recorrer&i 1, 3
      &counter := &counter + 1
      assertEq(&counter, &i+&counter2)
      recorrer&j 1, 3
        &counter := &counter + 1
        &counter2 := &counter2 + 1
        &counter3 := &counter3 + 1
        assertEq(&counter3, &j)
      proximo
      &counter3 := 0
    proximo
    assertEq(12, &counter)
    
    Recorrer&i 1,10
      Recorrer&j 1,10
        &val := &j + &i
      Proximo
    Proximo
    assertEq(20, &val)
    
    Recorrer&i 1,10
      Recorrer&j 1,10
        Recorrer&k 1,10
        &val := &j + &i + &k
        Proximo
      Proximo
    Proximo
    assertEq(30, &val)
    
    Recorrer&i 1,3
      &val1 := &val1 + 1
      Recorrer&j 1,3
        &val2 := &val2 + 1
        Recorrer&k 6,9
          &val3 := &val3 + 1
        Proximo
      Proximo
    Proximo
    assertEq(3 , &val1)
    assertEq(9 , &val2)
    assertEq(36, &val3)
    
    Recorrer&i 1,5
      Recorrer&j 1,10
        if(&j = 7)
          break
        endif
        &val := &i + &j
      Proximo
    Proximo
    assertEq(11, &val)
})

test("recorrer fechas", ->{
    #ifdef V6
    &fecha1 := PriDeMes(Fecha('31/01/2019'))
    #else
    &fecha1 := Fecha('01/01/2019')
    #endif
    &fecha2 := Fecha('31/01/2019')
    &val := 0
    
    Recorrer&i &fecha1, &fecha2
      &fecha3 := &i
    proximo
    assertEq(Fecha('31/01/2019'), &fecha3)
    assertEq(&fecha2, &fecha3)
    
    Recorrer&i &fecha1, &fecha2
      &val := &val + 1
    proximo
    assertEq(31, &val)
})
