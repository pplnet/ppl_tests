** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operacion binarias: division y div

** Los tests con operador '^' por el momento no compilan en v7.

&fechaPplObj := Fecha('02/01/2020')
&numero := 10
&datetime := Fecha(Fecha('01/01/2020') / 2)

&ErrMsgOp := 'No se puede realizar una operacion'

def AssertErrorOp(expresion)
  assertSyntaxError(&ErrMsgOp, expresion)
end

test('division', -> {
  assertEq(3  , 6   / 2)
  assertEq(-9 , -27 / 3)
  assertEq(9  , -27 / -3)
  assertEq(0  , 0   / 1)
  assertEq(1  , 1   / 0)
  assertEq(1.1, 1.1 / 0)
  assertEq(4  , 4   / 0)
  assertEq(2  , 5   / 2.5)
  assertEq(2  , 2.2 / 1.1)
  assertEq(2  , Int(10) / Int(5))
  
  #ifdef V6
  assertEq(2, 2^2 / 2)
  assertEq(-4, 2^2 / (-(1)))
  #endif
  
  assertEq(2.5 , Num('10')  / 4)
  assertEq(3   , Num('1.5') / Num('0.5'))
  assertEq(1.75, Num('3.5') / Num('2'))
  assertEq(3   , Dbl(1.5)   / Dbl(0.5))
  assertEq(0   , 0 / NewFbnObj('1'))
  assertEq(50  , NewFbnObj('100') / 2)
  assertEq(1   , NewFbnObj('1')   / 0)
  assertEq(2   , NewFbnObj('4')   / 2)
  assertEq(0   , NewPplObj('2',NO,SI) / 3)
  assertEq(2   , NewPplObj('4',SI,NO) / 2)
  assertEq(0   , NewValObj('2') / 3)
  
  assertEq(2  , Decimal(2) / 0)
  assertEq(1.5, Decimal(3) / Decimal(2))
  assertEq(1.5, Decimal(3) / 2)
  assertEq(1.5, Decimal(3) / Int(2))
  assertEq(1.5, Decimal(3) / Dbl(2))
  assertEq(1.5, Decimal(3) / Num('2'))
  assertEq(1.5, 3          / Decimal(2))
  assertEq(1.5, Int(3)     / Decimal(2))
  assertEq(1.5, Dbl(3)     / Decimal(2))
  assertEq(1.5, Num('3')   / Decimal(2))
  assertEq(1.2, Dbl(3)     / Decimal(2.5))
  
  AssertErrorOp("2 / '1'")
  AssertErrorOp("2 / 'NaN'")
  AssertErrorOp("2 / ''")
  
  AssertErrorOp("'1' / 2")
  AssertErrorOp("'NaN' / 2")
  AssertErrorOp("'' / 2")
  
  AssertErrorOp("NewPplObj(1) / 'foo'")
  AssertErrorOp("NewPplObj(1) / ''")
  AssertErrorOp("NewPplObj(1) / '1'")
  
  AssertErrorOp("'foo' / NewPplObj(1)")
  AssertErrorOp("'' / NewPplObj(1)")
  AssertErrorOp("'1' / NewPplObj(1)")
  
  AssertErrorOp("2 / SI")
  
  AssertErrorOp("Dbl(2.2) / '1.1'")
  AssertErrorOp("Dbl(1.1) / 'NaN'")
  AssertErrorOp("Dbl(1.1) / ''")
  AssertErrorOp("Dbl(2.1) / SI")
  
  AssertErrorOp("'1' / 1")
  AssertErrorOp("'2' / '1'")
  AssertErrorOp("'2.2' / 1.1")
  AssertErrorOp("'2' / SI")
  
  assertEq(21915.5, Fecha('01/01/2020') / 2)
  **// TODO: Migrar cuando este fixture + implementacion de Fecha()
#ifdef V6
  assertEq('31/12/1959 12:12:00', Fecha(Fecha('01/01/2020') / 2,'DD/MM/YYYY HH:MM:SS'))
  assertEq(12, Echo(&datetime.get_Hour))
#endif
  
  assertEq(0, Val(Z:1) / DbNull)
  assertEq(0, Val(Z:1) / Nil)
  assertEq(0, Val(Z:1) / 1)
  assertEq(0, NewFbnObj(DbNull) / DbNull)
  assertEq(0, NewFbnObj(DbNull) / Nil)
  assertEq(0, NewFbnObj(DbNull) / 1)
  assertEq(0, NewFbnObj('str')  / 1)
  assertEq(0, DbNull / NewFbnObj(DbNull))
  assertEq(0, Nil    / NewFbnObj(DbNull))
  assertEq(1, 1      / NewFbnObj(DbNull))
  assertEq(5, 5      / NewValObj('5'))
  assertEq(5, 5      / NewFbnObj('str'))
  assertEq(0, NewValObj('5')    / 5)
  assertEq(1, NewFbnObj(1)      / NewFbnObj(DbNull))
  assertEq(0, NewFbnObj(DbNull) / NewFbnObj(1))
  assertEq(0, NewFbnObj('str')  / NewFbnObj(1))
  assertEq(2, NewFbnObj('2')    / NewFbnObj(1))
  
  assertEq(3   , 3 / NewValObj('str'))
  assertEq(3   , 3 / NewValObj('1.5'))
  assertEq(3   , 3 / NewFbnObj('str'))
  assertEq(0   , NewValObj('str') / 3)
  assertEq(0   , NewValObj('1.5') / 3)
  assertEq(0   , NewFbnObj('str') / 3)
  assertEq(0.5 , NewFbnObj('1.5') / 3)
  assertEq(1.33, Round(2 / NewFbnObj('1.5'),2))
  
  assertEq(1, 1   div 0)
  assertEq(1, 1.1 div 0)
  assertEq(2, 10  div 4)
  assertEq(2, Int(10) div Int(4))
  assertEq(2, Num('10') div Num('4'))
  assertEq(4, 8 div 2.5)
  assertEq(2, 8 div 2.9)
  assertEq(2, 8 div Dbl(2.9))
  assertEq(2, 4.5 div 2.2)
  
  assertEq(2 , Num('10')  div 4)
  assertEq(2 , Num('3.5') div Num('2'))
  assertEq(0 , 0 div NewFbnObj('1'))
  assertEq(50, NewFbnObj('100') div 2)
  assertEq(1 , NewFbnObj('1')   div 0)
  assertEq(2 , NewFbnObj('4')   div 2)
  assertEq(0 , NewPplObj('2',NO,SI) div 3)
  assertEq(2 , NewPplObj('4',SI,NO) div 2)
  assertEq(0 , NewValObj('2') div 3)
  
  AssertErrorOp("8 div '2'")
  AssertErrorOp("1 div 'NaN'")
  AssertErrorOp("1 div ''")
  AssertErrorOp("8 div SI")
  
  AssertErrorOp("Dbl(4.5) div '2.2'")
  AssertErrorOp("Dbl(1.1) div 'NaN'")
  AssertErrorOp("Dbl(1.1) div ''")
  AssertErrorOp("Dbl(4.5) div SI")
  
  AssertErrorOp("'4.5' div 2.1")
  AssertErrorOp("'4.5' div '2.1'")
  AssertErrorOp("'4.5' div SI")
  
  assertEq(0, Val(Z:1) div DbNull)
  assertEq(0, Val(Z:1) div Nil)
  assertEq(0, Val(Z:1) div 1)
  assertEq(0, NewFbnObj(DbNull) div DbNull)
  assertEq(0, NewFbnObj(DbNull) div Nil)
  assertEq(0, NewFbnObj(DbNull) div 1)
  assertEq(0, NewFbnObj('str')  div 1)
  assertEq(0, DbNull div NewFbnObj(DbNull))
  assertEq(0, Nil    div NewFbnObj(DbNull))
  assertEq(1, 1      div NewFbnObj(DbNull))
  assertEq(5, 5      div NewValObj('5'))
  assertEq(5, 5      div NewFbnObj('str'))
  assertEq(0, NewValObj('5')    div 5)
  assertEq(1, NewFbnObj(1)      div NewFbnObj(DbNull))
  assertEq(0, NewFbnObj(DbNull) div NewFbnObj(1))
  assertEq(0, NewFbnObj('str')  div NewFbnObj(1))
  assertEq(2, NewFbnObj('2')    div NewFbnObj(1))
  
  assertEq(3, 3 div NewValObj('str'))
  assertEq(3, 3 div NewValObj('1.5'))
  assertEq(3, 3 div NewFbnObj('str'))
  assertEq(1, Round(3 div NewFbnObj('1.5'), 2))
  assertEq(0, NewValObj('str') div 3)
  assertEq(0, NewValObj('1.5') div 3)
  assertEq(0, NewFbnObj('str') div 3)
  assertEq(0, NewFbnObj('1.5') div 3)
})

