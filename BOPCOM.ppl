** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operaciones binarias:suma, resta, producto, division, div, mod, pow, =, <>, >, <, >=, <=

test('comparaciones', -> {
  assertEq(SI, 2 = 2)
  assertEq(NO, 2 = 3)
  assertEq(SI, 2 <> 3)
  assertEq(NO, 2 <> 2)
  assertEq(SI, 1 < 2)
  assertEq(NO, 3 < 2)
  assertEq(SI, 1 <= 2)
  assertEq(SI, 2 <= 2)
  assertEq(SI, 2 >= 2)
  assertEq(SI, 3 >= 2)
  assertEq(NO, 3 <= 2)
  assertEq(NO, 1 >= 2)
  assertEq(SI, Int(2) = Int(2))
  assertEq(NO, Int(2) = Int(3))
  assertEq(SI, Int(2) <> Int(3))
  assertEq(NO, Int(2) <> Int(2))
  assertEq(SI, Int(1) < Int(2))
  assertEq(NO, Int(3) < Int(2))
  assertEq(SI, Int(1) <= Int(2))
  assertEq(SI, Int(2) <= Int(2))
  assertEq(SI, Int(2) >= Int(2))
  assertEq(SI, Int(3) >= Int(2))
  assertEq(NO, Int(3) <= Int(2))
  assertEq(NO, Int(1) >= Int(2))
  assertEq(SI, Num('2') = Num('2'))
  assertEq(NO, Num('2') = Num('3'))
  assertEq(SI, Num('2') <> Num('3'))
  assertEq(NO, Num('2') <> Num('2'))
  assertEq(SI, Num('1') < Num('2'))
  assertEq(NO, Num('3') < Num('2'))
  assertEq(SI, Num('1') <= Num('2'))
  assertEq(SI, Num('2') <= Num('2'))
  assertEq(SI, Num('2') >= Num('2'))
  assertEq(SI, Num('3') >= Num('2'))
  assertEq(NO, Num('3') <= Num('2'))
  assertEq(NO, Num('1') >= Num('2'))
  assertEq(SI, Dbl(2.5) = Dbl(2.5))
  assertEq(NO, Dbl(2.5) = Dbl(2.6))
  assertEq(SI, Dbl(2.2) <> Dbl(3.3))
  assertEq(NO, Dbl(2.7) <> Dbl(2.7))
  assertEq(SI, Dbl(1.8) < Dbl(2.4))
  assertEq(NO, Dbl(3.1) < Dbl(2.9))
  assertEq(SI, Dbl(1.6) <= Dbl(2.4))
  assertEq(SI, Dbl(2.9) <= Dbl(2.9))
  assertEq(SI, Dbl(2.5) >= Dbl(2.5))
  assertEq(SI, Dbl(3.3) >= Dbl(2.8))
  assertEq(NO, Dbl(3.5) <= Dbl(2.9))
  assertEq(NO, Dbl(1.5) >= Dbl(2.2))
  assertEq(SI, Decimal(2) = Decimal(2))
  assertEq(NO, Decimal(2) = Decimal(3))
  assertEq(SI, Decimal(2) <> Decimal(3))
  assertEq(NO, Decimal(2) <> Decimal(2))
  assertEq(SI, Decimal(1) < Decimal(2))
  assertEq(NO, Decimal(3) < Decimal(2))
  assertEq(SI, Decimal(1) <= Decimal(2))
  assertEq(SI, Decimal(2) <= Decimal(2))
  assertEq(SI, Decimal(2) >= Decimal(2))
  assertEq(SI, Decimal(3) >= Decimal(2))
  assertEq(NO, Decimal(3) <= Decimal(2))
  assertEq(NO, Decimal(1) >= Decimal(2))
  assertEq(SI, NewFbnObj('2') =  NewFbnObj('2'))
  assertEq(NO, NewFbnObj('2') =  NewFbnObj('3'))
  assertEq(SI, NewFbnObj('2') <> NewFbnObj('3'))
  assertEq(NO, NewFbnObj('2') <> NewFbnObj('2'))
  assertEq(SI, NewFbnObj('1') <  NewFbnObj('2'))
  assertEq(NO, NewFbnObj('3') <  NewFbnObj('2'))
  assertEq(SI, NewFbnObj('1') <= NewFbnObj('2'))
  assertEq(SI, NewFbnObj('2') <= NewFbnObj('2'))
  assertEq(SI, NewFbnObj('2') >= NewFbnObj('2'))
  assertEq(SI, NewFbnObj('3') >= NewFbnObj('2'))
  assertEq(NO, NewFbnObj('3') <= NewFbnObj('2'))
  assertEq(NO, NewFbnObj('1') >= NewFbnObj('2'))
})