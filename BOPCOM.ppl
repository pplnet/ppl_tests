** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operaciones binarias: =, <>, >, <, >=, <=

&ErrMsgCompStr := 'No se pueden comparar strings'
*&ErrMsgCompMayor := 'El operador > no es valido'
*&ErrMsgCompMenor := 'El operador < no es valido'
*&ErrMsgCompMayorIgual := 'El operador >= no es valido'
*&ErrMsgCompMenorIgual := 'El operador <= no es valido'

test('comparaciones', -> {
  assertEq(SI, 2 = 2)
  assertEq(NO, 2 = 3)
  assertEq(SI, 2 <> 3)
  assertEq(NO, 2 <> 2)
  assertEq(SI, 1 < 2)
  assertEq(NO, 3 < 2)
  assertEq(SI, 3 > 2)
  assertEq(NO, 1 > 2)
  assertEq(SI, 1 <= 2)
  assertEq(SI, 2 <= 2)
  assertEq(SI, 2 >= 2)
  assertEq(SI, 3 >= 2)
  assertEq(NO, 3 <= 2)
  assertEq(NO, 1 >= 2)
  assertEq(SI, Int(2) = Int(2))
  assertEq(NO, Int(2) = Int(3))
  assertEq(SI, Int(2) <> Int(3))
  assertEq(NO, Int(2) <> Int(2))
  assertEq(SI, Int(1) < Int(2))
  assertEq(NO, Int(3) < Int(2))
  assertEq(SI, Int(1) <= Int(2))
  assertEq(SI, Int(2) <= Int(2))
  assertEq(SI, Int(2) >= Int(2))
  assertEq(SI, Int(3) >= Int(2))
  assertEq(NO, Int(3) <= Int(2))
  assertEq(NO, Int(1) >= Int(2))
  assertEq(SI, Num('2') = Num('2'))
  assertEq(NO, Num('2') = Num('3'))
  assertEq(SI, Num('2') <> Num('3'))
  assertEq(NO, Num('2') <> Num('2'))
  assertEq(SI, Num('1') < Num('2'))
  assertEq(NO, Num('3') < Num('2'))
  assertEq(SI, Num('1') <= Num('2'))
  assertEq(SI, Num('2') <= Num('2'))
  assertEq(SI, Num('2') >= Num('2'))
  assertEq(SI, Num('3') >= Num('2'))
  assertEq(NO, Num('3') <= Num('2'))
  assertEq(NO, Num('1') >= Num('2'))
  assertEq(SI, Dbl(2.5) = Dbl(2.5))
  assertEq(NO, Dbl(2.5) = Dbl(2.6))
  assertEq(SI, Dbl(2.2) <> Dbl(3.3))
  assertEq(NO, Dbl(2.7) <> Dbl(2.7))
  assertEq(SI, Dbl(1.8) < Dbl(2.4))
  assertEq(NO, Dbl(3.1) < Dbl(2.9))
  assertEq(SI, Dbl(1.6) <= Dbl(2.4))
  assertEq(SI, Dbl(2.9) <= Dbl(2.9))
  assertEq(SI, Dbl(2.5) >= Dbl(2.5))
  assertEq(SI, Dbl(3.3) >= Dbl(2.8))
  assertEq(NO, Dbl(3.5) <= Dbl(2.9))
  assertEq(NO, Dbl(1.5) >= Dbl(2.2))
  assertEq(SI, Decimal(2) = Decimal(2))
  assertEq(NO, Decimal(2) = Decimal(3))
  assertEq(SI, Decimal(2) <> Decimal(3))
  assertEq(NO, Decimal(2) <> Decimal(2))
  assertEq(SI, Decimal(1) < Decimal(2))
  assertEq(NO, Decimal(3) < Decimal(2))
  assertEq(SI, Decimal(1) <= Decimal(2))
  assertEq(SI, Decimal(2) <= Decimal(2))
  assertEq(SI, Decimal(2) >= Decimal(2))
  assertEq(SI, Decimal(3) >= Decimal(2))
  assertEq(NO, Decimal(3) <= Decimal(2))
  assertEq(NO, Decimal(1) >= Decimal(2))
  assertEq(SI, NewFbnObj('2') =  NewFbnObj('2'))
  assertEq(NO, NewFbnObj('2') =  NewFbnObj('3'))
  assertEq(SI, NewFbnObj('2') <> NewFbnObj('3'))
  assertEq(NO, NewFbnObj('2') <> NewFbnObj('2'))
  assertEq(SI, NewFbnObj('1') <  NewFbnObj('2'))
  assertEq(NO, NewFbnObj('3') <  NewFbnObj('2'))
  assertEq(SI, NewFbnObj('1') <= NewFbnObj('2'))
  assertEq(SI, NewFbnObj('2') <= NewFbnObj('2'))
  assertEq(SI, NewFbnObj('2') >= NewFbnObj('2'))
  assertEq(SI, NewFbnObj('3') >= NewFbnObj('2'))
  assertEq(NO, NewFbnObj('3') <= NewFbnObj('2'))
  assertEq(NO, NewFbnObj('1') >= NewFbnObj('2'))
  
  assertEq(SI, 1.1 = 1.1)
  assertEq(NO, 1.1 = 2.1)
  assertEq(NO, 1.1 <> 1.1)
  assertEq(SI, 1.1 <> 2.1)
  assertEq(SI, 1.1 > 0.9)
  assertEq(NO, 1.1 > 3.1)
  assertEq(SI, 0.1 < 1.1)
  assertEq(NO, 1.1 < 0.9)
  assertEq(SI, 1.1 >= 1.1)
  assertEq(NO, 1.1 >= 3.1)
  assertEq(SI, 1.1 <= 3.1)
  assertEq(NO, 1.1 <= 1.0)
          
  assertEq(SI, Decimal(1.1) =  Decimal(1.1))
  assertEq(NO, Decimal(1.1) =  Decimal(2.1))
  assertEq(NO, Decimal(1.1) <> Decimal(1.1))
  assertEq(SI, Decimal(1.1) <> Decimal(2.1))
  assertEq(SI, Decimal(1.1) >  Decimal(0.9))
  assertEq(NO, Decimal(1.1) >  Decimal(3.1))
  assertEq(SI, Decimal(0.1) <  Decimal(1.1))
  assertEq(NO, Decimal(1.1) <  Decimal(0.9))
  assertEq(SI, Decimal(1.1) >= Decimal(1.1))
  assertEq(NO, Decimal(1.1) >= Decimal(3.1))
  assertEq(SI, Decimal(1.1) <= Decimal(3.1))
  assertEq(NO, Decimal(1.1) <= Decimal(1.0))
  
  assertEq(SI, Decimal(1)   = 1)
  assertEq(NO, Decimal(1)   = 2)
  assertEq(SI, Decimal(1.1) = 1.1)
  assertEq(NO, Decimal(1.1) = 2)
  
  assertEq(SI, 1<>2 y 3<>4)
  assertEq(NO, 1<>2 y 3<>3)
  assertEq(SI, 1=2 o 3=3)
  assertEq(NO, 1=2 o 3<>3)
  
  assertEq(NO, Not 1=1)
  assertEq(SI, Not 1=2)
  assertEq(NO, Not 1=1 y Not 2=2)
  assertEq(NO, Not 1=1 o 2=3)
  assertEq(NO, 1=2 o Not 2=2)
  assertEq(SI, Not 1=2 y Not 2=3)
  assertEq(SI, Not 1=2 y 2=2)
  assertEq(SI, 1=1 y 2=2 o 3=3 y 4=2)
  assertEq(NO, (1=1 y 2=2 o 3=3) y 4=2)
  assertEq(SI, (1=1 y 2=2 o 3=3) y not 4=2)
  assertEq(NO, (1=1 y 2=2 o 3=3) y not 4=4)
  assertEq(SI, (1=1 y 2=3 o 3=1) o 4=4)
  assertEq(SI, 1+1>0)
  
  assertEq(NO, DbNull =  1)
  assertEq(SI, DbNull =  DbNull)
  assertEq(NO, DbNull <> DbNull)
  assertEq(SI, DbNull <> 1)
  assertEq(NO, DbNull >  1)
  assertEq(SI, 1      >  DbNull)
  assertEq(NO, 1      <  DbNull)
  assertEq(SI, DbNull <  1)
  assertEq(SI, DbNull >= DbNull)
  assertEq(SI, 1      >= DbNull)
  assertEq(SI, DbNull <= DbNull)
  assertEq(SI, DbNull <= 1)
  
  assertEq(SI, DbNull = 0)
  assertEq(SI, DbNull = Nil)
  assertEq(SI, DbNull = NewFbnObj(0))
  assertEq(SI, DbNull = NewFbnObj(DBNull))
  assertEq(SI, DbNull = NewFbnObj(''))
  assertEq(SI, 0 = DbNull)
  assertEq(SI, 0 = Nil)
  assertEq(SI, 0 = NewFbnObj(0))
  assertEq(SI, 0 = NewFbnObj(DBNull))
  assertEq(SI, 0 = NewFbnObj(''))
  assertEq(SI, Nil = DbNull)
  assertEq(SI, Nil = 0)
  assertEq(SI, Nil = NewFbnObj(0))
  assertEq(SI, Nil = NewFbnObj(DBNull))
  assertEq(SI, Nil = NewFbnObj(''))
  assertEq(SI, NewFbnObj(0) = DbNull)
  assertEq(SI, NewFbnObj(0) = 0)
  assertEq(SI, NewFbnObj(0) = Nil)
  assertEq(SI, NewFbnObj(0) = NewPplObj(DBNull))
  assertEq(SI, NewFbnObj(0) = NewPplObj(''))
  assertEq(SI, NewFbnObj(DbNull) = DbNull)
  assertEq(SI, NewFbnObj(DbNull) = 0)
  assertEq(SI, NewFbnObj(DbNull) = Nil)
  assertEq(SI, NewFbnObj(DbNull) = NewPplObj(0))
  assertEq(SI, NewFbnObj(DbNull) = NewPplObj(''))
  assertEq(SI, NewFbnObj('') = DbNull)
  assertEq(SI, NewFbnObj('') = 0)
  assertEq(SI, NewFbnObj('') = Nil)
  assertEq(SI, NewFbnObj('') = NewPplObj(0))
  assertEq(SI, NewFbnObj('') = NewPplObj(DbNull))
  
  assertError(&ErrMsgCompStr, -> 'foo' =  'foo')
  assertError(&ErrMsgCompStr, -> 'foo' =  'bar')
  assertError(&ErrMsgCompStr, -> 'foo' <> 'bar')
  assertError(&ErrMsgCompStr, -> 'foo' <> 'foo')
  
*  assertError(&ErrMsgCompMayor, -> 1 > 'foo')
*  assertError(&ErrMsgCompMayor, -> 'fpp' > 1)
*  assertError(&ErrMsgCompMenor, -> 1 < 'fo')
*  assertError(&ErrMsgCompMenor, -> 'fpp' < 1)
*  assertError(&ErrMsgCompMayorIgual, -> 1 >= 'foo')
*  assertError(&ErrMsgCompMayorIgual, -> 'fpp' >= 1)
*  assertError(&ErrMsgCompMenorIgual, -> 1 <= 'foo')
*  assertError(&ErrMsgCompMenorIgual, -> 'fpp' <= 1)
  
  assertEq(SI, Fecha('14/05/2012') =  Fecha('14/05/2012'))
  assertEq(NO, Fecha('14/05/2012') =  Fecha('15/05/2012'))
  assertEq(SI, Fecha('14/05/2012') <> Fecha('15/05/2012'))
  assertEq(NO, Fecha('14/05/2012') <> Fecha('14/05/2012'))
  assertEq(SI, Fecha('14/05/2012') >  Fecha('13/05/2012'))
  assertEq(NO, Fecha('14/05/2012') >  Fecha('14/05/2012'))
  assertEq(SI, Fecha('13/05/2012') <  Fecha('14/05/2012'))
  assertEq(NO, Fecha('14/05/2012') <  Fecha('14/05/2012'))
  assertEq(SI, Fecha('14/05/2012') <= Fecha('14/05/2012'))
  assertEq(NO, Fecha('14/05/2012') <= Fecha('13/05/2012'))
  assertEq(SI, Fecha('14/05/2012') >= Fecha('14/05/2012'))
  assertEq(NO, Fecha('14/05/2012') >= Fecha('15/05/2012'))
  
  assertEq(SI, Fecha('14/05/2012') <> 1)
  assertEq(NO, Fecha('14/05/2012') <> 41043)
  assertEq(SI, Fecha('14/05/2012') >  1)
  assertEq(NO, Fecha('14/05/2012') >  41044)
  assertEq(SI, Fecha('13/05/2012') <  41044)
  assertEq(NO, Fecha('14/05/2012') <  1)
  assertEq(SI, Fecha('14/05/2012') <= 41044)
  assertEq(NO, Fecha('14/05/2012') <= 1)
  assertEq(SI, Fecha('14/05/2012') >= 1)
  assertEq(NO, Fecha('14/05/2012') >= 41044)
  
**// TODO: Migrar cuando este fixture + implementacion de Fecha()
#ifdef V6
  assertEq(SI, NewFbnObj(Fecha('24/02/2016')) =  Fecha('24/02/2016'))
  assertEq(NO, NewFbnObj(Fecha('24/02/2016')) =  Fecha('25/02/2016'))
  assertEq(SI, NewFbnObj(Fecha('24/02/2016')) <> Fecha('25/02/2016'))
  assertEq(NO, NewFbnObj(Fecha('24/02/2016')) <> Fecha('24/02/2016'))
  assertEq(SI, NewFbnObj(Fecha('24/02/2016')) >  Fecha('23/02/2016'))
  assertEq(NO, NewFbnObj(Fecha('24/02/2016')) >  Fecha('01/03/2016'))
  assertEq(SI, NewFbnObj(Fecha('13/05/2012')) <  Fecha('01/03/2016'))
  assertEq(NO, NewFbnObj(Fecha('24/02/2016')) <  Fecha('23/02/2016'))
  assertEq(SI, NewFbnObj(Fecha('24/02/2016')) <= Fecha('24/02/2016'))
  assertEq(NO, NewFbnObj(Fecha('24/02/2016')) <= Fecha('23/02/2016'))
  assertEq(SI, NewFbnObj(Fecha('24/02/2016')) >= Fecha('24/02/2016'))
  assertEq(NO, NewFbnObj(Fecha('24/02/2016')) >= Fecha('25/02/2016'))
  assertEq(NO, NewFbnObj(Fecha('24/02/2016')) <= NewValObj(1000))
  assertEq(NO, NewFbnObj(Fecha('24/02/2016')) <= NewValObj(Fecha('20/02/2016')))
  
  ACN(X:1, Fecha('10/10/2015'))
  assertEq(SI, Fecha('10/10/2015') =  val(x:1))
  assertEq(NO, Fecha('10/10/2015') <> val(x:1))
  assertEq(SI, Fecha('10/10/2015') <= val(x:1))
  assertEq(NO, Fecha('10/10/2015') <  val(x:1))
  assertEq(SI, Fecha('10/10/2015') >= val(x:1))
  assertEq(NO, Fecha('10/10/2015') >  val(x:1))
  
  assertEq(NO, NewFbnObj(Fecha('14/05/2012')) = Val(A:1))
  assertEq(NO, NewValObj(Fecha('14/05/2012')) = Val(A:1))
  assertEq(NO, Val(A:1) = NewFbnObj(Fecha('14/05/2012')))
  assertEq(NO, Val(A:1) = NewValObj(Fecha('14/05/2012')))
#endif
  
  ACD(A:1, DbNull)
  ACT(A:2, 'aaa')
  ACD(A:3, 0)
  assertEq(SI, Val(A:1) =  DbNull)
  assertEq(NO, Val(A:1) <> DbNull)
  assertEq(SI, Val(A:1) =  NewFbnObj(DbNull))
  assertEq(NO, Val(A:1) <> NewFbnObj(DbNull))
  assertEq(SI, Val(A:1) =  0)
  assertEq(NO, Val(A:1) <> 0)
  assertEq(SI, Val(A:2) =  Val(A:3))
  assertEq(SI, Val(A:3) =  Val(A:2))
  
  assertEq(SI, SI Y SI)
  assertEq(NO, SI Y NO)
  assertEq(NO, NO Y NO)
  assertEq(NO, NO Y SI)
  
  assertEq(SI, 1 Y 1)
  assertEq(NO, 1 Y 0)
  assertEq(NO, 0 Y 0)
  assertEq(NO, 0 Y 1)
  
  assertEq(SI,  2 Y 2)
  assertEq(NO,  2 Y 0)
  assertEq(NO,  0 Y 2)
  assertEq(NO, -2 Y 2)
  assertEq(NO, -2 Y 0)
  assertEq(NO, (-2) Y (-2))
  * Falla en V6 por el - del segundo termino
#ifdef V7
  assertEq(SI, -2 Y -2)
#endif
  
  ACN(B:1,1)
  ACN(B:2,0)
  assertEq(SI, Val(B:1) Y 1)
  assertEq(NO, Val(B:1) Y 0)
  assertEq(NO, Val(B:2) Y 0)
  assertEq(NO, Val(B:2) Y 1)
  
  assertEq(SI, 1 Y Val(B:1))
  assertEq(NO, 0 Y Val(B:1))
  assertEq(NO, 0 Y Val(B:2))
  assertEq(NO, 1 Y Val(B:2))
  
  assertEq(SI, SI o SI)
  assertEq(SI, SI o NO)
  assertEq(NO, NO o NO)
  assertEq(SI, NO o SI)
  
  assertEq(SI, 1 o 1)
  assertEq(SI, 1 o 0)
  assertEq(NO, 0 o 0)
  assertEq(SI, 0 o 1)
  
  assertEq(SI, Val(B:1) o 1)
  assertEq(SI, Val(B:1) o 0)
  assertEq(NO, Val(B:2) o 0)
  assertEq(SI, Val(B:2) o 1)
  
  assertEq(SI, 1 o Val(B:1))
  assertEq(SI, 0 o Val(B:1))
  assertEq(NO, 0 o Val(B:2))
  assertEq(SI, 1 o Val(B:2))
  
  ACT(C:1, 'TEST')
  assertEq(NO, Val(C:1) > 0)
  assertEq(SI, Val(C:1) >= 0)
  assertEq(NO, Val(C:1) < 0)
  assertEq(SI, Val(C:1) <= 0)
  assertEq(SI, Val(C:1) = 0)
  assertEq(NO, Val(C:1) <> 0)
  assertEq(NO, 0 > Val(C:1))
  assertEq(SI, 0 >= Val(C:1))
  assertEq(NO, 0 < Val(C:1))
  assertEq(SI, 0 <= Val(C:1))
  assertEq(SI, 0 = Val(C:1))
  assertEq(NO, 0 <> Val(C:1))
  
  assertEq(NO, NewValObj('10') > 0)
  assertEq(SI, NewValObj('10') >= 0)
  assertEq(NO, NewValObj('10') < 0)
  assertEq(SI, NewValObj('10') <= 0)
  assertEq(SI, NewValObj('10') = 0)
  assertEq(NO, NewValObj('10') <> 0)
  assertEq(NO, 0 > NewValObj('10'))
  assertEq(SI, 0 >= NewValObj('10'))
  assertEq(NO, 0 < NewValObj('10'))
  assertEq(SI, 0 <= NewValObj('10'))
  assertEq(SI, 0 = NewValObj('10'))
  assertEq(NO, 0 <> NewValObj('10'))
  
  assertEq(SI, NewFbnObj('10') > 0)
  assertEq(SI, NewFbnObj('10') >= 0)
  assertEq(NO, NewFbnObj('10') < 0)
  assertEq(NO, NewFbnObj('10') <= 0)
  assertEq(NO, NewFbnObj('10') = 0)
  assertEq(SI, NewFbnObj('10') <> 0)
  assertEq(NO, 0 > NewFbnObj('10'))
  assertEq(NO, 0 >= NewFbnObj('10'))
  assertEq(SI, 0 < NewFbnObj('10'))
  assertEq(SI, 0 <= NewFbnObj('10'))
  assertEq(NO, 0 = NewFbnObj('10'))
  assertEq(SI, 0 <> NewFbnObj('10'))
  
  ACN(D:1, 5)
  ACT(D:2, '300')
  assertEq(SI, Val(D:1) * Val(D:2) = 0)
  assertEq(SI, Val(D:1) * Val(D:2) = 0)
  assertEq(SI, Val(D:2) * Val(D:1) = 0)
  assertEq(SI, Val(D:2) * Val(D:1) = 0)
})
