** Operaciones Binarias entre tipos primitivos: int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operaciones binarias:  suma, resta, producto, division, div, mod, pow, =, <>, >, <, >=, <=

let(&fechaStr, '02/01/2020') 
let(&fechaPplObj, Fecha('02/01/2020')) 
let(&fechaDateTime, DateFromStr('02/01/2020'))




test('suma', -> {
  assertEq(2, 1 + 1)
  assertEq(1, 0 + 1)
  assertEq(9, -1 + 10)
  assertEq(0, -1 + 1)
  assertEq(-1, -2 + 1)
  assertEq(1, 1 + (10 * 0))
  assertEq(2, 1 + (1))
  assertEq(2, 1 + ((1)))
  assertEq(2, 1 + (((1))))
  assertEq(2, 1 + [1])
  assertEq(2, 1 + [[1]])
  assertEq(2, [1 + 1])
  assertEq(2, [(1 + 1)])
  assertEq(2, [[((1 + 1))]])
  assertEq(2, (1 + 1))
  assertEq(2, (((1 + 1))))
  assertEq(-2, -(1 + 1))
  assertEq(2, ((1 + 1)))
  assertEq(6, [2^2] + (1 + 1))
  assertEq(2, [2^2] + (-(1 + 1)))
  assertEq(11, Num('10') + 1)
  assertEq(3, Num('1.5') + Num('1.5'))
  assertEq(2.5, Num('1.5') + Num('1'))
  assertEq(&fechaPplObj, Fecha('01/01/2020') + 1)
  assertEq(NewPplObj(DateFromStr('02/01/2020')), Fecha('01/01/2020') + 1)
  assertEq(NewPplObj(Fecha('02/01/2020')), DateFromStr('01/01/2020') + 1)
  assertEq(3, NewPplObj('1',SI,SI) * 1 + 2)
  assertEq(1, NewPplObj('1',SI,SI) * 0 + 1)
  assertEq(3, NewPplObj('1',SI,SI) + 1 * 2)
  assertEq(4, NewPplObj('1',SI,SI) + 3)
  assertEq(3, NewPplObj('1',NO,SI) + 3)
  assertEq(4, NewPplObj('1',SI,NO) + 3)
  assertEq(3, NewPplObj('1',NO,NO) + 3)
})
