** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operaciones binarias:suma, resta, producto, division, div, mod, pow, =, <>, >, <, >=, <=

** Los tests con operador '^' estan comentados porque en v7 no compilan por el momento.

&fechaPplObj := Fecha('02/01/2020')

test('division', -> {
  assertEq(3, 6 / 2)
  assertEq(-9, -27 / 3)
  assertEq(9, -27 / -3)
  assertEq(0, 0 / 1)
  assertEq(1, 1 / 0)
  assertEq(4, 4 / 0)
  assertEq(2, 5 / 2.5)
  assertEq(2, Int(10) / Int(5))
  
  #ifdef V6
  assertEq(2, 2^2 / 2)
  assertEq(-4, 2^2 / (-(1)))
  #endif
  
  assertEq(2.5, Num('10') / 4)
  assertEq(3, Num('1.5') / Num('0.5'))
  assertEq(1.75, Num('3.5') / Num('2'))
  assertEq(3, Dbl(1.5) / Dbl(0.5))
  assertEq(50, NewPplObj('100',SI,SI) / 2)
  assertEq(0, 0 / NewPplObj('1',SI,SI))
  assertEq(1, NewPplObj('1',SI,SI) / 0)
  assertEq(2, NewPplObj('4',SI,SI) / 2)
  assertEq(0, NewPplObj('2',NO,SI) / 3)
  assertEq(2, NewPplObj('4',SI,NO) / 2)
  assertEq(0, NewPplObj('2',NO,NO) / 3)
  assertEq(2, Decimal(4) / Decimal(2))
  assertEq(2, Decimal(2) / 0)
})

test('comparaciones', -> {
  assertEq(SI, 2 = 2)
  assertEq(NO, 2 = 3)
  assertEq(SI, 2 <> 3)
  assertEq(NO, 2 <> 2)
  assertEq(SI, 1 < 2)
  assertEq(NO, 3 < 2)
  assertEq(SI, 1 <= 2)
  assertEq(SI, 2 <= 2)
  assertEq(SI, 2 >= 2)
  assertEq(SI, 3 >= 2)
  assertEq(NO, 3 <= 2)
  assertEq(NO, 1 >= 2)
  assertEq(SI, Int(2) = Int(2))
  assertEq(NO, Int(2) = Int(3))
  assertEq(SI, Int(2) <> Int(3))
  assertEq(NO, Int(2) <> Int(2))
  assertEq(SI, Int(1) < Int(2))
  assertEq(NO, Int(3) < Int(2))
  assertEq(SI, Int(1) <= Int(2))
  assertEq(SI, Int(2) <= Int(2))
  assertEq(SI, Int(2) >= Int(2))
  assertEq(SI, Int(3) >= Int(2))
  assertEq(NO, Int(3) <= Int(2))
  assertEq(NO, Int(1) >= Int(2))
  assertEq(SI, Num('2') = Num('2'))
  assertEq(NO, Num('2') = Num('3'))
  assertEq(SI, Num('2') <> Num('3'))
  assertEq(NO, Num('2') <> Num('2'))
  assertEq(SI, Num('1') < Num('2'))
  assertEq(NO, Num('3') < Num('2'))
  assertEq(SI, Num('1') <= Num('2'))
  assertEq(SI, Num('2') <= Num('2'))
  assertEq(SI, Num('2') >= Num('2'))
  assertEq(SI, Num('3') >= Num('2'))
  assertEq(NO, Num('3') <= Num('2'))
  assertEq(NO, Num('1') >= Num('2'))
  assertEq(SI, Dbl(2.5) = Dbl(2.5))
  assertEq(NO, Dbl(2.5) = Dbl(2.6))
  assertEq(SI, Dbl(2.2) <> Dbl(3.3))
  assertEq(NO, Dbl(2.7) <> Dbl(2.7))
  assertEq(SI, Dbl(1.8) < Dbl(2.4))
  assertEq(NO, Dbl(3.1) < Dbl(2.9))
  assertEq(SI, Dbl(1.6) <= Dbl(2.4))
  assertEq(SI, Dbl(2.9) <= Dbl(2.9))
  assertEq(SI, Dbl(2.5) >= Dbl(2.5))
  assertEq(SI, Dbl(3.3) >= Dbl(2.8))
  assertEq(NO, Dbl(3.5) <= Dbl(2.9))
  assertEq(NO, Dbl(1.5) >= Dbl(2.2))
  assertEq(SI, Decimal(2) = Decimal(2))
  assertEq(NO, Decimal(2) = Decimal(3))
  assertEq(SI, Decimal(2) <> Decimal(3))
  assertEq(NO, Decimal(2) <> Decimal(2))
  assertEq(SI, Decimal(1) < Decimal(2))
  assertEq(NO, Decimal(3) < Decimal(2))
  assertEq(SI, Decimal(1) <= Decimal(2))
  assertEq(SI, Decimal(2) <= Decimal(2))
  assertEq(SI, Decimal(2) >= Decimal(2))
  assertEq(SI, Decimal(3) >= Decimal(2))
  assertEq(NO, Decimal(3) <= Decimal(2))
  assertEq(NO, Decimal(1) >= Decimal(2))
  assertEq(SI, NewPplObj('2',SI,SI) = NewPplObj('2',SI,SI))
  assertEq(NO, NewPplObj('2',SI,SI) = NewPplObj('3',SI,SI))
  assertEq(SI, NewPplObj('2',SI,SI) <> NewPplObj('3',SI,SI))
  assertEq(NO, NewPplObj('2',SI,SI) <> NewPplObj('2',SI,SI))
  assertEq(SI, NewPplObj('1',SI,SI) < NewPplObj('2',SI,SI))
  assertEq(NO, NewPplObj('3',SI,SI) < NewPplObj('2',SI,SI))
  assertEq(SI, NewPplObj('1',SI,SI) <= NewPplObj('2',SI,SI))
  assertEq(SI, NewPplObj('2',SI,SI) <= NewPplObj('2',SI,SI))
  assertEq(SI, NewPplObj('2',SI,SI) >= NewPplObj('2',SI,SI))
  assertEq(SI, NewPplObj('3',SI,SI) >= NewPplObj('2',SI,SI))
  assertEq(NO, NewPplObj('3',SI,SI) <= NewPplObj('2',SI,SI))
  assertEq(NO, NewPplObj('1',SI,SI) >= NewPplObj('2',SI,SI))
})

test('combinaciones', -> {
  assertEq(11, 1 + Int(10))
  assertEq(11, 1 + Num('10'))
  assertEq(11.5, Dbl(1.5) + Num('10'))
  assertEq(1, 1 + (10 * 0))
  assertEq(2, 1 + (1))
  assertEq(2, 1 + ((1)))
  assertEq(2, 1 + (((1))))
  assertEq(2, 1 + [1])
  assertEq(2, 1 + [[1]])
  assertEq(2, [1 + 1])
  assertEq(2, [(1 + 1)])
  assertEq(2, [[((1 + 1))]])
  assertEq(2, (1 + 1))
  assertEq(2, (((1 + 1))))
  assertEq(-2, -(1 + 1))
  assertEq(2, ((1 + 1)))
  
  #ifdef V6
  assertEq(29, 2 + 3 ^3)
  assertEq(125, (2 + 3) ^3)
  assertEq(6, [2^2] + (1 + 1))
  assertEq(2, [2^2] + (-(1 + 1)))
  assertEq(2^25, 2^20 * 2^5)
  #endif
  
  assertEq(7, [2 + (3 * 4)] / 2)
  assertEq(7, [Num('2') + (Int(3) * Dbl(4.0))] / Num('2'))
  assertEq(7.3, [Dbl(2.5) + (Num('3.5') * Dbl(4.5))] / Dbl(2.5))
  assertEq(7, [NewPplObj('2',SI,SI) + (Dbl(3.0) * Num('4'))] / NewPplObj('2',SI,NO))
  assertEq(4, [(Decimal(2) + Decimal(2)) * Decimal(2)] / Decimal(2))
})

test('div-mod-pow', -> {
  assertEq(2, 10 div 4)
  assertEq(2, Int(10) div Int(4))
  assertEq(2, Num('10') div Num('4'))
  assertEq(1, 10 mod 3)
  assertEq(1, Int(10) mod Int(3))
  assertEq(1, Num('10') mod Num('3'))
  assertEq(1, pow(2,0))
  assertEq(0, pow(0,1))
  assertEq(8, pow(2,3))
  assertEq(-8, -pow(2,3))
})
