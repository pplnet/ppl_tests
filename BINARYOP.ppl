** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operaciones binarias:suma, resta, producto, division, div, mod, pow, =, <>, >, <, >=, <=

&fechaStr := '02/01/2020'
&fechaPplObj := Fecha('02/01/2020')
&fechaDateTime := DateFromStr('02/01/2020')
&numero := 10

test('suma', -> {
  assertEq(2, 1 + 1)
  assertEq(1, 0 + 1)
  assertEq(9, -1 + 10)
  assertEq(0, -1 + 1)
  assertEq(-1, -2 + 1)
  assertEq(20, Int(10) + Int(10))
  assertEq(1, 1 + (10 * 0))
  assertEq(2, 1 + (1))
  assertEq(2, 1 + ((1)))
  assertEq(2, 1 + (((1))))
  assertEq(2, 1 + [1])
  assertEq(2, 1 + [[1]])
  assertEq(2, [1 + 1])
  assertEq(2, [(1 + 1)])
  assertEq(2, [[((1 + 1))]])
  assertEq(2, (1 + 1))
  assertEq(2, (((1 + 1))))
  assertEq(-2, -(1 + 1))
  assertEq(2, ((1 + 1)))
  **assertEq(6, [2^2] + (1 + 1))
  **assertEq(2, [2^2] + (-(1 + 1)))
  assertEq(11, Num('10') + 1)
  assertEq(3, Num('1.5') + Num('1.5'))
  assertEq(2.5, Num('1.5') + Num('1'))
  assertEq(3, Dbl(1.5) + Dbl(1.5))
  assertEq(&fechaPplObj, Fecha('01/01/2020') + 1)
  assertEq(NewPplObj(DateFromStr('02/01/2020')), Fecha('01/01/2020') + 1)
  assertEq(NewPplObj(Fecha('02/01/2020')), DateFromStr('01/01/2020') + 1)
  assertEq(3, NewPplObj('1',SI,SI) * 1 + 2)
  assertEq(1, NewPplObj('1',SI,SI) * 0 + 1)
  assertEq(3, NewPplObj('1',SI,SI) + 1 * 2)
  assertEq(4, NewPplObj('1',SI,SI) + 3)
  assertEq(3, NewPplObj('1',NO,SI) + 3)
  assertEq(4, NewPplObj('1',SI,NO) + 3)
  assertEq(3, NewPplObj('1',NO,NO) + 3)
  assertEq(4, Decimal(2) + Decimal(2))
})

test('resta', -> {
  assertEq(1, 2 - 1)
  assertEq(1, 1 - 0)
  assertEq(-1, 9 - 10)
  assertEq(0, 1 - 1)
  assertEq(5, Int(10) - Int(5))
  *assertEq(3, 2^2 - 1)
  *assertEq(5, 2^2 - (-(1)))
  assertEq(9, Num('10') - 1)
  assertEq(1, Num('1.5') - Num('0.5'))
  assertEq(0.5, Num('1.5') - Num('1'))
  assertEq(1, Dbl(1.5) - Dbl(0.5))
  assertEq(&fechaPplObj, Fecha('03/01/2020') - 1)
  assertEq(NewPplObj(DateFromStr('02/01/2020')), Fecha('03/01/2020') - 1)
  assertEq(NewPplObj(Fecha('02/01/2020')), DateFromStr('03/01/2020') - 1)
  assertEq(1, NewPplObj('1',SI,SI) * 2 - 1)
  assertEq(-1, NewPplObj('1',SI,SI) * 0 - 1)
  assertEq(1, NewPplObj('3',SI,SI) - 1 * 2)
  assertEq(1, NewPplObj('4',SI,SI) - 3)
  assertEq(-3, NewPplObj('2',NO,SI) - 3)
  assertEq(1, NewPplObj('4',SI,NO) - 3)
  assertEq(-3, NewPplObj('2',NO,NO) - 3)
  assertEq(2, Decimal(4) - Decimal(2))
})

test('producto', -> {
  assertEq(6, 2 * 3)
  assertEq(-20, -2 * 10)
  assertEq(0, 1 * 0)
  assertEq(50, Int(10) * Int(5))
  *assertEq(8, 2^2 * 2)
  *assertEq(-4, 2^2 * (-(1)))
  assertEq(10, Num('10') * 1)
  assertEq(0.75, Num('1.5') * Num('0.5'))
  assertEq(3, Num('1.5') * Num('2'))
  assertEq(0.75, Dbl(1.5) * Dbl(0.5))
  assertEq(2, NewPplObj('1',SI,SI) * 2)
  assertEq(0, NewPplObj('1',SI,SI) * 0)
  assertEq(12, NewPplObj('4',SI,SI) * 3)
  assertEq(0, NewPplObj('2',NO,SI) * 3)
  assertEq(12, NewPplObj('4',SI,NO) * 3)
  assertEq(0, NewPplObj('2',NO,NO) * 3)
  assertEq(8, Decimal(4) * Decimal(2))
})

test('division', -> {
  assertEq(3, 6 / 2)
  assertEq(-9, -27 / 3)
  assertEq(0, 0 / 1)
  assertEq(2, Int(10) / Int(5))
  *assertEq(2, 2^2 / 2)
  *assertEq(-4, 2^2 / (-(1)))
  assertEq(2.5, Num('10') / 4)
  assertEq(3, Num('1.5') / Num('0.5'))
  assertEq(1.75, Num('3.5') / Num('2'))
  assertEq(3, Dbl(1.5) / Dbl(0.5))
  assertEq(50, NewPplObj('100',SI,SI) / 2)
  assertEq(0, 0 / NewPplObj('1',SI,SI))
  assertEq(2, NewPplObj('4',SI,SI) / 2)
  assertEq(0, NewPplObj('2',NO,SI) / 3)
  assertEq(2, NewPplObj('4',SI,NO) / 2)
  assertEq(0, NewPplObj('2',NO,NO) / 3)
  assertEq(2, Decimal(4) / Decimal(2))
})
