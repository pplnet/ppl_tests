*Ignore=V7

test("op interop instance eval empty", -> {
    &op := NewOpInterop()
    &op.Eval('')
    assertPass()
})

test("op interop dialog", -> {
    &src := @"
        DIALOG_SIZE:300;100
        CAMPOS:;;
            Cantidad: 'Total' ;;;;;;;;;1000
    "
    &op := NewOpInterop()
    &op.Eval(&src)
    assertPass()
    
    **********************************************************
    ** Estos son metodos internos de core.
    ** Igualmente son accesibles si se necesitan, pero la idea 
    ** es facilitar el uso desde PPL utilizando funciones
    ** directamente desde el obj OpInterop
    ** (Resolviendo las conversiones de args y return)
    &dialog := &op.get_Dialog
    assertEq(300, &dialog.get_DialogWidth)
    assertEq(100, &dialog.get_DialogHeight)
    assertEq(1000, &dialog.GetValue("Cantidad")) *** GenObj
    **********************************************************
    
    **********************************************************
    ** Metodos para usar desde PPL:
    **********************************************************
    ** Valores de campos
    assertEq(1000, &op.Value("CANTIDAD"))
    assertEq(1000, &op.Value("cantidad"))
    assertEq(0, &op.Value("Precio1"))
    ** Labels de campos
    assertEq("Total", &op.Label("CANTIDAD"))
    assertEq("Total", &op.Label("cantidad"))
    assert(Vacio(&op.Label("Precio1")))
    **** Campos implicitos
    assertEq("NrOperacion", &op.Label("NrOperacion"))
    assertEq("Tipo Op.", &op.Label("TipoOp"))
    assertEq("Observaciones", &op.Label("Observaciones"))
    **********************************************************
})