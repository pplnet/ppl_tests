** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operaciones binarias:suma, resta, producto, division, div, mod, pow

** Los tests con operador '^' estan comentados porque en v7 no compilan por el momento.

test('combinaciones', -> {
  assertEq(-1.1, -1.1)
  assertEq(   2, 2 * 5 / 5)
  assertEq(   8, 2 + 2 * 3)
  assertEq(   8, 3 * 2 + 2)
  assertEq(  14, 3 * 2 + 2 * 4)
  assertEq(  11, 6 / 2 + 2 * 4)
  assertEq(  -5, 6 / 2 - 2 * 4)
  assertEq(  12, (2 + 2) * 3)
  assertEq(  60, (2 + 2) * (3 + 2) * 3)
  assertEq(  30, ((2 + 2 * 3) + 2) * 3)
  assertEq(  51, (3 + (2 + 2) * 3 + 2) * 3)
  assertEq(  12, [2 + 2] * 3)
  
  assertEq(1, 1 + (10 * 0))
  assertEq(2, 1 + (1))
  assertEq(2, 1 + ((1)))
  assertEq(2, 1 + (((1))))
  assertEq(2, 1 + [1])
  assertEq(2, 1 + [[1]])
  assertEq(2, [1 + 1])
  assertEq(2, [(1 + 1)])
  assertEq(2, [[((1 + 1))]])
  assertEq(2, (1 + 1))
  assertEq(2, (((1 + 1))))
  assertEq(-2, -(1 + 1))
  assertEq(2, ((1 + 1)))
  
  #ifdef V6
  assertEq(  29, 2 + 3^3)
  assertEq( 125, (2 + 3)^3)
  assertEq(   1, 125 / 5^3)
  assertEq(  25, 5^5/125)
  assertEq(   6, [2^2] + (1 + 1))
  assertEq(   2, [2^2] + (-(1 + 1)))
  assertEq(2^25, 2^20 * 2^5)
  #endif
  
  assertEq(  7, [2 + (3 * 4)] / 2)
  assertEq(  7, [Num('2') + (Int(3) * Dbl(4.0))] / Num('2'))
  assertEq(7.3, [Dbl(2.5) + (Num('3.5') * Dbl(4.5))] / Dbl(2.5))
  assertEq(  7, [NewFbnObj('2') + (Dbl(3.0) * Num('4'))] / NewPplObj('2',SI,NO))
  assertEq( 14, [NewFbnObj('2') + (Dbl(3.0) * Num('4'))] / NewPplObj('2',NO,SI))
  assertEq(  6, [NewValObj('2') + (Dbl(3.0) * Num('4'))] / NewPplObj('2',SI,NO))
  assertEq(  1, [NewFbnObj('2') + (Dbl(3.0) * DbNull)] / NewPplObj('2',SI,NO))
  assertEq(  1, [NewFbnObj('2') + (Dbl(3.0) * Nil)] / NewPplObj('2',SI,NO))
  assertEq(  4, [(Decimal(2) + Decimal(2)) * Decimal(2)] / Decimal(2))
})
