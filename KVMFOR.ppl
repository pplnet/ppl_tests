test("kvm for in", -> {
    &kvm := ${key1=1, key2=2, key3=3}
    &counter := 1
    &counter2 := Num('1')
    &counter3 := Int(1)
    &counter4 := NewPplObj('1',SI,SI)
    
    for &val in &kvm
       &key := 'key'~FSTR(&counter,0,0)
       assertEq(&key, &val.get_key)
       assertEq(&kvm.get(&key), &val.get_value)
       assertEq('key'~FSTR(&counter,0,0), &val.get_key)
       assertEq(&kvm.get('key'~FSTR(&counter,0,0)), &val.get_value)
       
       &key2 := 'key'~FSTR(&counter2,0,0)
       assertEq(&key2, &val.get_key)
       assertEq(&kvm.get(&key2), &val.get_value)
       assertEq('key'~FSTR(&counter2,0,0), &val.get_key)
       assertEq(&kvm.get('key'~FSTR(&counter2,0,0)), &val.get_value)
       
       &key3 := 'key'~FSTR(&counter3,0,0)
       assertEq(&key3, &val.get_key)
       assertEq(&kvm.get(&key3), &val.get_value)
       assertEq('key'~FSTR(&counter3,0,0), &val.get_key)
       assertEq(&kvm.get('key'~FSTR(&counter3,0,0)), &val.get_value)
       
       &key4 := 'key'~FSTR(&counter3,0,0)
       assertEq(&key4, &val.get_key)
       assertEq(&kvm.get(&key4), &val.get_value)
       assertEq('key'~FSTR(&counter3,0,0), &val.get_key)
       assertEq(&kvm.get('key'~FSTR(&counter3,0,0)), &val.get_value)
       
       &counter := &counter + 1
       &counter2 := &counter2 + 1
       &counter3 := &counter3 + 1
       &counter4 := &counter4 + 1
    end
})

test("kvm for in anidados", -> {
    &kvm1 := ${key1=1, key2=2, key3=3}
    &kvm2 := ${key1=4, key2=5, key3=6}
    &counter := 1
    
    for &val in &kvm1
       &key := 'key'~FSTR(&counter,0,0)
       assertEq(&key, &val.get_key)
       assertEq(&kvm1.get(&key), &val.get_value)
       assertEq('key'~FSTR(&counter,0,0), &val.get_key)
       assertEq(&kvm1.get('key'~FSTR(&counter,0,0)), &val.get_value)
       &counter := &counter + 1
       
       &counter2 := 1
       for &val1 in &kvm2
          &key2 := 'key'~FSTR(&counter2,0,0)
          assertEq(&key2, &val1.get_key)
          assertEq(&kvm2.get(&key2), &val1.get_value)
          assertEq('key'~FSTR(&counter2,0,0), &val1.get_key)
          assertEq(&kvm2.get('key'~FSTR(&counter2,0,0)), &val1.get_value)
          &counter2 := &counter2 + 1
       end 
    end
})

test("kvm for in continue", -> {
    &kvm := ${key1=1, key2=2, key3=3}
    &prueba := ${clave1=1}
    
    for &val in &kvm
       &prueba.add(${clave2 = &val.get_value})
       continue
       &prueba.add(${clave3 = &val.get_value})
    end
    assertEq(1, &prueba.clave1)
    assertEq(3, &prueba.clave2)
    assertEq(NULL, &prueba.clave3)
})

test("kvm for in break", -> {
    &kvm := ${key1=1, key2=2, key3=3}
    &prueba := ${clave1=1}
    
    for &val in &kvm
       &prueba.add(${clave2 = &val.get_value})
       break
       &prueba.add(${clave3 = &val.get_value})
    end
    assertEq(1, &prueba.clave1)
    assertEq(1, &prueba.clave2)
    assertEq(NULL, &prueba.clave3)
})
