*test("kvm for in", -> {
*    let &kvm ${key1=1,key2=2,key3=3}
*    let &counter 1
*    for &val in &kvm
*        let &key "key"~FSTR(&counter,0,0)
*        assertEq(&key, &val.get_key)
*        assertEq(&kvm.get(&key), &val.get_value)
*        let &counter &counter + 1
*    end
*})
*
*test("kvm for in", -> {
*    let &kvm ${key1=1,key2=2,key3=3}
*    let &counter 1
*    for &val in &kvm
*        let &key "key"~FSTR(&counter,0,0)
*        assertEq(&key, &val.get_key)
*        assertEq(&kvm.get(&key), &val.get_value)
*        let &counter &counter + 1
*    end
*})

test("kvm for in anidados", -> {
    let &kvm1 ${key1=1, key2=2, key3=3}
    let &kvm2 ${key1=4, key2=5, key3=6}
    let &counter 1
    let &counter2 1
    
    for &val in &kvm1
       &key := 'key'~FSTR(&counter,0,0)
       assertEq(&key, &val.get_key)
       assertEq(&kvm1.get(&key), &val.get_value)
       assertEq('key'~FSTR(&counter,0,0), &val.get_key)
       assertEq(&kvm1.get('key'~FSTR(&counter,0,0)), &val.get_value)
       let &counter &counter + 1
       
       for &val in &kvm2
          &key2 := 'key'~FSTR(&counter2,0,0)
          assertEq(&key2, &val.get_key)
          assertEq(&kvm2.get(&key2), &val.get_value)
          assertEq('key'~FSTR(&counter2,0,0), &val.get_key)
          assertEq(&kvm2.get('key'~FSTR(&counter2,0,0)), &val.get_value)
          let &counter2 &counter2 + 1
       end
    end
})