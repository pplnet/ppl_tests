** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operacion binarias: pow

** Los tests con operador '^' por el momento no compilan en v7.

&numero := 2
&datetime1 := Fecha('02/01/2020')
&datetime2 := Fecha('05/01/2020')

&ErrMsgOp := 'No se puede realizar una operacion'
&ErrMsgPowForCor := 'La cadena de entrada no tiene el formato correcto'

def AssertErrorOp(expresion)
  assertSyntaxError(&ErrMsgOp, expresion)
end

test('pow', -> {
  assertEq(1, pow(2,0))
  assertEq(0, pow(0,1))
  assertEq(8, pow(2,3))
  assertEq(-8, -pow(2,3))
  
  assertEq(1, pow(Int(2),Int(0)))
  assertEq(8, pow(Int(2),Num('3')))
  assertEq(-8, -pow(Int(2),Decimal(3)))
  
  #ifdef V6
  assertEq(8     , 2^2 * 2)
  assertEq(-4    , 2^2 * (-(1)))
  assertEq(2     , 1+1^8)
  assertEq(256   , (1+1)^8)
  assertEq(0     , 0^-1)
  assertEq(1     , 1^0)
  assertEq(0     , 0^0)
  assertEq(274.37, Round(2   ^ 8.1, 2))
  assertEq(593.78, Round(2.2 ^ 8.1, 2))
  
  assertEq(10    , Num('10')  ^ 1)
  assertEq(32    , Num('2') ^ Num('5'))
  assertEq(64    , Num('2') ^ Num('6'))
  assertEq(593.78, Round(Dbl(2.2) ^ Dbl(8.1),2))
  assertEq(1     , NewFbnObj('1') ^ 2)
  assertEq(1     , NewFbnObj('1') ^ 0)
  assertEq(8     , NewFbnObj('2') ^ 3)
  assertEq(0     , NewPplObj('2',NO,SI) ^ 3)
  assertEq(8     , NewPplObj('2',SI,NO) ^ 3)
  assertEq(0     , NewValObj('2') ^ 3)
  
  assertEq(9, Decimal(3) ^ Decimal(2))
  assertEq(9, Decimal(3) ^ 2)
  assertEq(9, Decimal(3) ^ &numero)
  assertEq(9, Decimal(3) ^ Int(2))
  assertEq(9, Decimal(3) ^ Dbl(2))
  assertEq(9, Decimal(3) ^ Num('2'))
  assertEq(9, 3        ^ Decimal(2))
  assertEq(9, Int(3)   ^ Decimal(2))
  assertEq(9, Dbl(3)   ^ Decimal(2))
  assertEq(9, Num('3') ^ Decimal(2))
  assertEq(140.3, Round(Dbl(3) ^ Decimal(4.5), 2))
  
  assertEq(8, 2 ^ (&datetime2 - &datetime1))
  
  AssertErrorOp("2 ^ '8'")
  AssertErrorOp("1 ^ 'NaN'")
  AssertErrorOp("1 ^ ''")
  AssertErrorOp("2 ^ SI")
  AssertErrorOp("'8' ^ 2")
  AssertErrorOp("'NaN' ^ 1")
  assertSyntaxError(&ErrMsgPowForCor, "'' ^ 1")
  AssertErrorOp("SI ^ 2")
  
  AssertErrorOp("NewPplObj(2) ^ 'foo'")
  AssertErrorOp("NewPplObj(2) ^ ''")
  AssertErrorOp("NewPplObj(2) ^ '1'")
  
  assertSyntaxError(&ErrMsgPowForCor, "'foo' ^ NewPplObj(1)")
  assertSyntaxError(&ErrMsgPowForCor, "'' ^ NewPplObj(1)")
  AssertErrorOp("'2' ^ NewPplObj(1)")
  
  AssertErrorOp("round(Dbl(2.2) ^ '8.1', 2)")
  AssertErrorOp("Dbl(1.1) ^ 'NaN'")
  AssertErrorOp("Dbl(1.1) ^ ''")
  AssertErrorOp("Dbl(2.2) ^ SI")
  
  AssertErrorOp("'2' ^ 1")
  AssertErrorOp("round('2.2' ^ '8.1', 2)")
  AssertErrorOp("round('2.2' ^  8.1 , 2)")
  AssertErrorOp("'2.2' ^ SI")
  
  assertEq(0, Val(Z:1) ^ DbNull)
  assertEq(0, Val(Z:1) ^ Nil)
  assertEq(0, Val(Z:1) ^ 1)
  assertEq(0, NewFbnObj(DbNull) ^ DbNull)
  assertEq(0, NewFbnObj(DbNull) ^ Nil)
  assertEq(0, NewFbnObj(DbNull) ^ 1)
  assertEq(0, NewFbnObj('str')  ^ 1)
  assertEq(0, DbNull   ^ NewFbnObj(DbNull))
  assertEq(0, Nil      ^ NewFbnObj(DbNull))
  assertEq(1, 1        ^ NewFbnObj(DbNull))
  assertEq(1, 5        ^ NewValObj('5'))
  assertEq(1, 5        ^ NewFbnObj('str'))
  assertEq(0, NewValObj('2')      ^ 5)
  assertEq(1, NewFbnObj(1)        ^ NewFbnObj(DbNull))
  assertEq(0, NewFbnObj(DbNull)   ^ NewFbnObj(1))
  assertEq(0, NewFbnObj('str')    ^ NewFbnObj(1))
  assertEq(2, NewFbnObj('2')      ^ NewFbnObj(1))
  
  assertEq(1    , 3 ^ NewValObj('str'))
  assertEq(1    , 3 ^ NewValObj('1.5'))
  assertEq(1    , 3 ^ NewFbnObj('str'))
  assertEq(5.2  , Round(3 ^ NewFbnObj('1.5'), 2))
  assertEq(0    , NewValObj('str') ^ 3)
  assertEq(0    , NewValObj('1.5') ^ 3)
  assertEq(0    , NewFbnObj('str') ^ 3)
  assertEq(3.375, NewFbnObj('1.5') ^ 3)
  assertEq(27   , NewFbnObj(3) ^ 3)
  
  ACN(A:1,2)
  ACN(A:2,4)
  ACT(A:3,'4')
  assertEq(16, Val(A:1) ^ Val(A:2))
  assertEq(16, Val(A:1) ^ Num(Val(A:3)))
  
  #endif  
})
