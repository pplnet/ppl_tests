** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operacion binarias: Mod y Mod2

&numero := 10

&ErrMsgModIntStr := 'No se puede obtener el resto de una division entre System.Int32 y System.String'
&ErrMsgModIntBol := 'No se puede obtener el resto de una division entre System.Int32 y System.Boolean'
&ErrMsgModDblStr := 'No se puede obtener el resto de una division entre System.Double y System.String'
&ErrMsgModDblBol := 'No se puede obtener el resto de una division entre System.Double y System.Boolean'
&ErrMsgModStrInt := 'No se puede obtener el resto de una division entre System.String y System.Int32'
&ErrMsgModStrStr := 'No se puede obtener el resto de una division entre System.String y System.String'
&ErrMsgModStrDbl := 'No se puede obtener el resto de una division entre System.String y System.Double'
&ErrMsgModStrBol := 'No se puede obtener el resto de una division entre System.String y System.Boolean'

test('mod', -> {
  assertEq(2 , 11        mod 3)
  assertEq(1 , &numero   mod 3)
  assertEq(2 , Int(11)   mod Int(3))
  assertEq(2 , Num('11') mod Num('3'))
  assertEq(2 , Dbl(11.5) mod 3)
  assertEq(2 , Dbl(11.5) mod Dbl(4.5))
  assertEq(0 , Dbl(1.1)  mod 0)
  assertEq(2 , 2  mod Dbl(8.1))
  assertEq(0 , 5  mod 0)
  assertEq(0 , 0  mod 5)
  assertEq(-1, -7 mod 3)
  assertEq(1 , 7  mod -3)
  
  assertEq(1, Decimal(3) mod Decimal(2))
  assertEq(1, Decimal(3) mod 2)
  assertEq(1, Decimal(3) mod Int(2))
  assertEq(1, Decimal(3) mod Dbl(2))
  assertEq(1, Decimal(3) mod Num('2'))
  assertEq(1, 3        mod Decimal(2))
  assertEq(1, Int(3)   mod Decimal(2))
  assertEq(1, Dbl(3)   mod Decimal(2))
  assertEq(1, Num('3') mod Decimal(2))
  
  assertEq(2, NewFbnObj('11') mod 3)
  assertEq(0, NewFbnObj('5')  mod 0)
  assertEq(0, NewPplObj('11',NO,SI) mod 3)
  assertEq(2, NewPplObj('11',SI,NO) mod 3)
  assertEq(0, NewValObj('11') mod 3)
  
  assertError(&ErrMsgModIntStr, -> 2 mod '8')
  assertError(&ErrMsgModIntStr, -> 2 mod 'NaN')
  assertError(&ErrMsgModIntStr, -> 2 mod '')
  assertError(&ErrMsgModIntBol, -> 2 mod SI)
  
  assertError(&ErrMsgModDblStr, -> Dbl(2.2) mod '1.1')
  assertError(&ErrMsgModDblStr, -> Dbl(1.1) mod 'NaN')
  assertError(&ErrMsgModDblStr, -> Dbl(1.1) mod '')
  assertError(&ErrMsgModDblBol, -> Dbl(2.1) mod SI)
  
  assertError(&ErrMsgModStrInt, -> '1' mod 1)
  assertError(&ErrMsgModStrStr, -> '2' mod '1')
  assertError(&ErrMsgModStrDbl, -> '2.2' mod 1.1)
  assertError(&ErrMsgModStrBol, -> '2' mod SI)
  
  assertEq(0, Val(Z:1) mod DbNull)
  assertEq(0, Val(Z:1) mod Nil)
  assertEq(0, Val(Z:1) mod 1)
  assertEq(0, DbNull   mod 1)
  assertEq(0, NewFbnObj(DbNull) mod DbNull)
  assertEq(0, NewFbnObj(DbNull) mod Nil)
  assertEq(0, NewFbnObj(DbNull) mod 1)
  assertEq(0, NewFbnObj('str')  mod 1)
  assertEq(0, DbNull mod NewFbnObj(DbNull))
  assertEq(0, Nil    mod NewFbnObj(DbNull))
  assertEq(0, 1      mod NewFbnObj(DbNull))
  assertEq(0, 5      mod NewValObj('5'))
  assertEq(0, 5      mod NewFbnObj('str'))
  assertEq(0, NewValObj('5')    mod 5)
  assertEq(0, NewFbnObj(1)      mod NewFbnObj(DbNull))
  assertEq(0, NewFbnObj(DbNull) mod NewFbnObj(1))
  assertEq(0, NewFbnObj('str')  mod NewFbnObj(1))
  assertEq(2, NewFbnObj('11')   mod NewFbnObj(3))
  
  assertEq(0, 2 mod NewValObj('str'))
  assertEq(0, 2 mod NewValObj('1.5'))
  assertEq(0, 2 mod NewFbnObj('str'))
  assertEq(3, 3 mod NewFbnObj('11'))
  assertEq(0, NewValObj('str') mod 2)
  assertEq(0, NewValObj('1.5') mod 2)
  assertEq(0, NewFbnObj('str') mod 2)
  assertEq(2, NewFbnObj('11') mod 3)
  
  ACN(A:1,11)
  ACN(A:2,3)
  assertEq(2, Val(A:1) mod Val(A:2))
  assertEq(3, Val(A:2) mod Val(A:1))
  
  assertEq(2, 2 % 8)
  assertEq(2, 2 % 8.1)
  assertEq(2, Round(2.2 % 8.1, 1))
  assertEq(2, Round(2.2 % 8.1, 1))
  assertEq(0, 1.1 % 0)
})

test('mod2', -> {
  assertEq(2  , 11        mod2 3)
  assertEq(1  , &numero   mod2 3)
  assertEq(2  , Int(11)   mod2 Int(3))
  assertEq(2  , Num('11') mod2 Num('3'))
  assertEq(2.5, Dbl(11.5) mod2 3)
  assertEq(1.5, Dbl(11.5) mod2 Dbl(2.5))
  assertEq(0  , Dbl(1.1)  mod2 0)
  assertEq(2  , 2  mod2 Dbl(8.1))
  assertEq(0  , 5  mod2 0)
  assertEq(0  , 0  mod2 5)
  assertEq(-1 , -7 mod2 3)
  assertEq(1  , 7  mod2 -3)
  
  assertEq(1, Decimal(3) mod2 Decimal(2))
  assertEq(1, Decimal(3) mod2 2)
  assertEq(1, Decimal(3) mod2 Int(2))
  assertEq(1, Decimal(3) mod2 Dbl(2))
  assertEq(1, Decimal(3) mod2 Num('2'))
  assertEq(1, 3        mod2 Decimal(2))
  assertEq(1, Int(3)   mod2 Decimal(2))
  assertEq(1, Dbl(3)   mod2 Decimal(2))
  assertEq(1, Num('3') mod2 Decimal(2))
  
  assertEq(2, NewFbnObj('11') mod2 3)
  assertEq(0, NewFbnObj('5')  mod2 0)
  assertEq(0, NewPplObj('11',NO,SI) mod2 3)
  assertEq(2, NewPplObj('11',SI,NO) mod2 3)
  assertEq(0, NewValObj('11') mod2 3)
  
  assertError(&ErrMsgModIntStr, -> 2 mod2 '8')
  assertError(&ErrMsgModIntStr, -> 2 mod2 'NaN')
  assertError(&ErrMsgModIntStr, -> 2 mod2 '')
  assertError(&ErrMsgModIntBol, -> 2 mod2 SI)
  
  assertError(&ErrMsgModDblStr, -> Dbl(2.2) mod2 '1.1')
  assertError(&ErrMsgModDblStr, -> Dbl(1.1) mod2 'NaN')
  assertError(&ErrMsgModDblStr, -> Dbl(1.1) mod2 '')
  assertError(&ErrMsgModDblBol, -> Dbl(2.1) mod2 SI)
  
  assertError(&ErrMsgModStrInt, -> '1' mod2 1)
  assertError(&ErrMsgModStrStr, -> '2' mod2 '1')
  assertError(&ErrMsgModStrDbl, -> '2.2' mod2 1.1)
  assertError(&ErrMsgModStrBol, -> '2' mod2 SI)
  
  assertEq(0, Val(Z:1) mod2 DbNull)
  assertEq(0, Val(Z:1) mod2 Nil)
  assertEq(0, Val(Z:1) mod2 1)
  assertEq(0, DbNull   mod2 1)
  assertEq(0, NewFbnObj(DbNull) mod2 DbNull)
  assertEq(0, NewFbnObj(DbNull) mod2 Nil)
  assertEq(0, NewFbnObj(DbNull) mod2 1)
  assertEq(0, NewFbnObj('str')  mod2 1)
  assertEq(0, DbNull mod2 NewFbnObj(DbNull))
  assertEq(0, Nil    mod2 NewFbnObj(DbNull))
  assertEq(0, 1      mod2 NewFbnObj(DbNull))
  assertEq(0, 5      mod2 NewValObj('5'))
  assertEq(0, 5      mod2 NewFbnObj('str'))
  assertEq(0, NewValObj('5')    mod2 5)
  assertEq(0, NewFbnObj(1)      mod2 NewFbnObj(DbNull))
  assertEq(0, NewFbnObj(DbNull) mod2 NewFbnObj(1))
  assertEq(0, NewFbnObj('str')  mod2 NewFbnObj(1))
  assertEq(2, NewFbnObj('11')   mod2 NewFbnObj(3))
  
  assertEq(0, 2 mod2 NewValObj('str'))
  assertEq(0, 2 mod2 NewValObj('1.5'))
  assertEq(0, 2 mod2 NewFbnObj('str'))
  assertEq(3, 3 mod2 NewFbnObj('11'))
  assertEq(0, NewValObj('str') mod2 2)
  assertEq(0, NewValObj('1.5') mod2 2)
  assertEq(0, NewFbnObj('str') mod2 2)
  assertEq(2, NewFbnObj('11') mod2 3)
  assertEq(1.5, NewFbnObj('1.5') mod2 3)
  
  ACN(A:1,11)
  ACN(A:2,3)
  assertEq(2, Val(A:1) mod2 Val(A:2))
  assertEq(3, Val(A:2) mod2 Val(A:1))
})
