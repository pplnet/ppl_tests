test("kvm", ->{
    let &prueba ${STRING1='string', CANTIDAD1=1, PRECIO1=12.2}
*    &prueba := ${STRING1='string', CANTIDAD1=1, PRECIO1=12.2}
    assertEq('string', &prueba.STRING1)
    assertEq(1, &prueba.CANTIDAD1)
    assertEq(12.2, &prueba.PRECIO1)
})

test("kvm set kvmprop", ->{
    let &suscripcion ${codigo='FCS', nombre='Suscripcion de fondos', tipo='FCI'}
*    &suscripcion := ${codigo='FCS', nombre='Suscripcion de fondos', tipo='FCI'}
    let &rescate ${codigo='FCR', nombre='Rescate de fondos', tipo = &suscripcion.tipo}
    
    assertEq('FCI', &suscripcion.tipo)
    assertEq('FCI', &rescate.tipo)
})

test("kvm props case insensitive", ->{
    let &op ${codigo = 'MMPF', nombre='Plazo Fijo'}
*    &op := ${codigo = 'MMPF', nombre='Plazo Fijo'}
    
    assertEq('MMPF', &op.codigo)
    assertEq('MMPF', &op.CODIGO)
    assertEq('Plazo Fijo', &op.nombre)
    assertEq('Plazo Fijo', &op.NOMBRE)
})

test("kvm add kvmprop", ->{
    let &persona ${nombre = 'Pepe'}
*    &persona := ${nombre = 'Pepe'}
    &persona.add(apellido = 'Argento', dni = 12345678)
    assertEq('Argento', &persona.apellido)
    assertEq(12345678, &persona.dni)
})

test("kvm remove kvmprop", ->{
    let &persona ${nombre = 'Pepe', apellido = 'Argento', dni = 12345678}
*    &persona := ${nombre = 'Pepe', apellido = 'Argento', dni = 12345678}
    &persona.remove('apellido')
    &persona.remove('dni')
    assertEq('Pepe', &persona.nombre)
    assertEq(NULL, &persona.apellido)
    assertEq(NULL, &persona.dni)
})

test("kvm contains kvmprop", ->{
    let &persona ${nombre = 'Pepe', apellido = 'Argento', dni = 12345678}
*    &persona := ${nombre = 'Pepe', apellido = 'Argento', dni = 12345678}
    &persona.remove('dni')
    assertEq(SI, &persona.contains('nombre'))
    assertEq(SI, &persona.contains('apellido'))
    assertEq(NO, &persona.contains('dni'))
    &persona.add(dni = 12345678)
    assertEq(SI, &persona.contains('dni'))
})

test("kvm anidado", ->{
    let &prueba ${STRING1='string', SUBKVM=${ENTERO1=10}}
*    &prueba := ${STRING1='string',SUBKVM=${ENTERO1=10}}
    assertEq('string', &prueba.STRING1)
*    assertEq(10, &prueba.SUBKVM.ENTERO1)
})

test("kvm count", ->{
    let &op ${codigo='MMPF', nombre='Plazo Fijo'}
    &op.remove('nombre')
    assertEq(NO, &op.contains('nombre'))
*    assertEq(1, &op.count)
})


