ACT(A:1,'string')
ACN(A:2,1)
ACN(A:3,12.2)
test("kvm", ->{
    let &prueba ${STRING1='string', CANTIDAD1=1, PRECIO1=12.2}
*    &prueba := ${STRING1='string', CANTIDAD1=1, PRECIO1=12.2}
*    let &prueba2 ${STRING1=Val(A:1), CANTIDAD1=Val(A:2), PRECIO1=Val(A:3)}
*    &prueba2 := ${STRING1=Val(A:1), CANTIDAD1=Val(A:2), PRECIO1=Val(A:3)}
    let &prueba3 ${STRING1='string', CANTIDAD1=NewPplObj('1',SI,SI), PRECIO1=NewPplObj('12.2',SI,SI)}
*    &prueba3 := ${STRING1='string', CANTIDAD1=NewPplObj('1',SI,SI), PRECIO1=NewPplObj('12.2',SI,SI)}
    let &prueba4 ${STRING1='string', CANTIDAD1=Num('1'), PRECIO1=Dbl(12.2)}
*    &prueba4 := ${STRING1='string', CANTIDAD1=Num('1'), PRECIO1=Dbl(12.2)}

    assertEq('string', &prueba.STRING1)
    assertEq(1, &prueba.CANTIDAD1)
    assertEq(12.2, &prueba.PRECIO1)
*    assertEq('string', &prueba2.STRING1)
*    assertEq(1, &prueba2.CANTIDAD1)
*    assertEq(12.2, &prueba2.PRECIO1)
    assertEq('string', &prueba3.STRING1)
    assertEq(1, &prueba3.CANTIDAD1)
    assertEq(12.2, &prueba3.PRECIO1)
    assertEq('string', &prueba4.STRING1)
    assertEq(1, &prueba4.CANTIDAD1)
    assertEq(12.2, &prueba4.PRECIO1)
})

test("kvm set kvmprop", ->{
    let &suscripcion ${codigo='FCS', nombre='Suscripcion de fondos', tipo='FCI'}
*    &suscripcion := ${codigo='FCS', nombre='Suscripcion de fondos', tipo='FCI'}
    let &rescate ${codigo='FCR', nombre='Rescate de fondos', tipo = &suscripcion.tipo}
    
    assertEq('FCI', &suscripcion.tipo)
    assertEq('FCI', &rescate.tipo)
})

test("kvm props case insensitive", ->{
    let &op ${codigo = 'MMPF', NOMBRE='Plazo Fijo'}
*    &op := ${codigo = 'MMPF', NOMBRE='Plazo Fijo'}
    
    assertEq('MMPF', &op.codigo)
    assertEq('MMPF', &op.CODIGO)
    assertEq('Plazo Fijo', &op.nombre)
    assertEq('Plazo Fijo', &op.NOMBRE)
})

test("kvm add kvmprop", ->{
    let &persona ${nombre = 'Pepe'}
*    &persona := ${nombre = 'Pepe'}
    &persona.add(apellido = 'Argento', dni = 12345678)
    assertEq('Argento', &persona.apellido)
    assertEq(12345678, &persona.dni)
})

test("kvm remove kvmprop", ->{
    let &persona ${nombre = 'Pepe', apellido = 'Argento', dni = 12345678}
*    &persona := ${nombre = 'Pepe', apellido = 'Argento', dni = 12345678}
    &persona.remove('apellido')
    &persona.remove('dni')
    assertEq('Pepe', &persona.nombre)
    assertEq(NULL, &persona.apellido)
    assertEq(NULL, &persona.dni)
})

test("kvm contains kvmprop", ->{
    let &persona ${nombre = 'Pepe', apellido = 'Argento', dni = 12345678}
*    &persona := ${nombre = 'Pepe', apellido = 'Argento', dni = 12345678}
    &persona.remove('dni')
    assertEq(SI, &persona.contains('nombre'))
    assertEq(SI, &persona.contains('NOMBRE'))
    assertEq(SI, &persona.contains('apellido'))
    assertEq(SI, &persona.contains('APELLIDO'))
    assertEq(NO, &persona.contains('dni'))
    assertEq(NO, &persona.contains('DNI'))
    &persona.add(dni = 12345678)
    assertEq(SI, &persona.contains('dni'))
})

test("kvm anidado", ->{
    let &prueba ${STRING1='string', SUBKVM=${ENTERO1=10}}
*    &prueba := ${STRING1='string',SUBKVM=${ENTERO1=10}}
    assertEq('string', &prueba.STRING1)
*    assertEq(10, &prueba.SUBKVM.ENTERO1)
    let &tmp &prueba.SUBKVM
    assertEq(10, &tmp.ENTERO1)
})

test("kvm count", ->{
    let &op ${codigo='MMPF', nombre='Plazo Fijo'}
    &op.remove('nombre')
    assertEq(1, &op.count)
})

test("kvm for in", -> {
    let &kvm ${key1=1,key2=2,key3=3}
    let &counter 1
    for &val in &kvm
       let &key 'key'~FSTR(&counter,0,0)
       assertEq(&key, &val.get_key)
       assertEq(&kvm.get(&key), &val.get_value)
       assertEq('key'~&counter, &val.get_key)
       assertEq(&kvm.get('key'~FSTR(&counter,0,0)), &val.get_value)
       let &counter &counter + 1
    end
})

