test("kvm", ->{
    let &prueba ${STRING1='string', CANTIDAD1=1, PRECIO1=12.2}
*    &prueba := ${STRING1='string', CANTIDAD1=1, PRECIO1=12.2}
    assertEq('string', &prueba.STRING1)
    assertEq(1, &prueba.CANTIDAD1)
    assertEq(12.2, &prueba.PRECIO1)
})

test("kvm set kvmprop", ->{
    let &operacion ${codigo='FCS', nombre='Suscripcion de fondos', tipo='FCI'}
*    &operacion := ${codigo='FCS', nombre='Suscripcion de fondos', tipo='FCI'}
    let &operacion1 ${tipo = &operacion.tipo}
    
    assertEq('FCI', &operacion.tipo)
    assertEq('FCI', &operacion1.tipo)
})

test("kvm props case insensitive", ->{
    let &foo ${FOO = 'foo', bar='bar'}
    
    assertEq('foo', &foo.foo)
    assertEq('foo', &foo.FOO)
    assertEq('bar', &foo.bar)
    assertEq('bar', &foo.BAR)
})





*test("kvm set kvmprop", ->{

**    let &foo ${bar='bar'}
**    &foo.add(bar: 'BAR')
    
    *    assertEq('BAR', &foo.bar)
    *})


*test("kvm anidado", ->{
*    &prueba2 := ${STRING1='string',SUBKVM=${ENTERO1=10}}
*    assertEq('string', &prueba2.STRING1)
*    assertEq(10, &prueba2.SUBKVM.ENTERO1)
*})

test("kvm remove", ->{

    let &foo ${key1='MMPF', argento='MM'}
    &foo.remove('key1')
    assertEq(NULL, &foo.key1)
*    assertEq(1, &foo.count)
})





