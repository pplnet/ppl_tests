def concat(arg1, arg2)
  return arg1~arg2
end

def echo(msg)
  return msg
end

def mensaje(msg)
  return msg
  123
end

def sumar(a, b)
  a + b
end

def sumar1(a, b)
  return a + b
end

def sumar2(a, b);
  return a + b;
end

def even(num) 
  if num % 2 = 0
     return true
  end
  return false
end

def double(n)
  &res := n * 2
  &res
end

* Se asume que from > to.
def down_to(from, to)
  &i := from
  while
    if &i = to
       break
    endif
    &i := &i - 1
  next
  return &i
end

def factorial(n)
  &fac := 1
  &i := 1
  while
    if &i < n
       &fac := &fac + &fac * &i
       &i := &i + 1
    else
       break   
    endif
  next
  &fac
end

def factorial2(n)
  if 0 >= n
     return 1
  endif
  n * factorial(n-1)
end

**// Revisar asignacion de un lambda a una variables
*&sum := lambda(a, b) -> a + b
*&sum1 := `(a, b) -> a + b

def sum_two_args(arg1, arg2)
  arg1 + arg2
end

test("def func args", -> {
    assertEq('HolaMundo', concat('Hola', 'Mundo'))
    assertEq('Hello pipex!', echo('Hello pipex!'))
    assertEq('Hello pipex!', mensaje('Hello pipex!'))
    assertEq(5, sumar(2,3))
    assertEq(5, sumar1(2,3))
    assertEq(5, sumar2(2,3))
    assertEq(SI, even(2))
    assertEq(NO, even(3))
    assertEq(10, double(5))
    assertEq(5, down_to(10,5))
    assertEq(120, factorial(5))
    assertEq(120, factorial2(5))
    assertEq('ExtendedPPL', GetType(core))
    *assertEq(5, &sum(2,3))
    *assertEq(5, &sum1(2,3))
    
    try
       def eqstrtest str1, str2
         * Le pasa la pelota a la funcion del core.
         * En este caso, si quisieramos, podriamos alterar
         * los parametros.
         return core.eqstrtest(str1, str2) 
       end
    catch
       assertEq(NO, eqstrtest('hello','world'))
    end
    
    try
       def eqstrtest (str1, str2)
         * Le pasa la pelota a la funcion del core.
         * En este caso, los parametros pasan directamente a 
         * la funcionc core. (No tenemos forma de modificarlos).
         return super
       end
    catch
       assertEq(NO, eqstrtest('hello','world'))
    end
    
    try
       def eqstrtest (str1, str2)
           * Sin importar los args, siempre retorna true.
           return true
       end
    catch
       assertEq(SI, eqstrtest('hello','world'))
    end
    
*    assertError('ERR. Se esperaban 2 argumentos pero especificaron 3.', -> {
*       sum_two_args(1,2,3)
*    })
    
    assertEq(1, sum_two_args(1))
})

