** Operaciones Binarias entre tipos primitivos:int, double, decimal, datetime, string
** y pplObj (nulleable y soft) en todas sus variantes

** Operacion binarias: suma

** Los tests con operador '^' por el momento no compilan en v7.

** En V6 los assertSyntaxError en realidad dan error de ejecución

&fechaPplObj := Fecha('02/01/2020')
&numero := 10
&datetime := Fecha('02/01/2020')

&ErrMsgOp := 'No se puede realizar una operacion'

test('suma', -> {
  assertEq(2, 1 + 1)
  assertEq(1, 0 + 1)
  assertEq(9, -1 + 10)
  assertEq(9, -1 + &numero)
  assertEq(0, -1 + 1)
  assertEq(-1, -2 + 1)
  assertEq(2.1, 1 + 1.1)
  assertEq(2.2, 1.1 + 1.1)
  assertEq(20, Int(10) + Int(10))
  
  #ifdef V6
  assertEq(6, [2^2] + 2)
  assertEq(2, [2^2] + (-2))
  #endif
  
  assertEq(11,  Num('10')  + 1)
  assertEq(3,   Num('1.5') + Num('1.5'))
  assertEq(2.5, Num('1.5') + Num('1'))
  assertEq(3,   Dbl(1.5) + Dbl(1.5))
  assertEq(2.5, Dbl(1.5) + 1)
  assertEq(2.5, Dbl(1.5) + Int(1))
  assertEq(2.5, Dbl(1.5) + Num('1'))
  assertEq(4.5, Dbl(1.5) + Decimal(3))
  assertEq(2.5, 1          + Dbl(1.5))
  assertEq(2.5, Int(1)     + Dbl(1.5))
  assertEq(2.5, Num('1')   + Dbl(1.5))
  assertEq(4.5, Decimal(3) + Dbl(1.5))
  
  assertEq(3, NewFbnObj('1') * 1 + 2)
  assertEq(1, NewFbnObj('1') * 0 + 1)
  assertEq(3, NewFbnObj('1') + 1 * 2)
  assertEq(4, NewFbnObj('1') + 3)
  assertEq(3, NewPplObj('1',NO,SI) + 3)
  assertEq(4, NewPplObj('1',SI,NO) + 3)
  assertEq(3, NewValObj('1') + 3)
  
  assertEq(3, NewFbnObj('')    + 3)
  assertEq(4, NewFbnObj('1')   + Int(3))
  assertEq(5, NewFbnObj('1.5') + Dbl(3.5))
  assertEq(4, NewFbnObj('1')   + Num('3'))
  assertEq(5, NewFbnObj('1.5') + Decimal(3.5))
  assertEq(4, Int(3)       + NewFbnObj('1'))
  assertEq(5, Dbl(3.5)     + NewFbnObj('1.5'))
  assertEq(4, Num('3')     + NewFbnObj('1'))
  assertEq(5, Decimal(3.5) + NewFbnObj('1.5'))
  
  assertEq(4, Decimal(2) + Decimal(2))
  assertEq(5, Decimal(3) + 2)
  assertEq(5, Decimal(3) + Int(2))
  assertEq(5, Decimal(3) + Dbl(2))
  assertEq(5, Decimal(3) + Num('2'))
  assertEq(5,   2        + Decimal(3))
  assertEq(5,   Int(2)   + Decimal(3))
  assertEq(5,   Dbl(2)   + Decimal(3))
  assertEq(5,   Num('2') + Decimal(3))
  assertEq(5.5, Dbl(2)   + Decimal(3.5))
  
  assertSyntaxError(&ErrMsgOp, "1 + 'foo'")
  assertSyntaxError(&ErrMsgOp, "1 + ''")
  assertSyntaxError(&ErrMsgOp, "1 + '1'")
  
  assertSyntaxError(&ErrMsgOp, "'foo' + 1")
  assertSyntaxError(&ErrMsgOp, "'' + 1")
  assertSyntaxError(&ErrMsgOp, "'1' + 1")
  
  assertSyntaxError(&ErrMsgOp, "NewPplObj(1) + 'foo'")
  assertSyntaxError(&ErrMsgOp, "NewPplObj(1) + ''")
  assertSyntaxError(&ErrMsgOp, "NewPplObj(1) + '1'")
  
  assertSyntaxError(&ErrMsgOp, "'foo' + NewPplObj(1)")
  assertSyntaxError(&ErrMsgOp, "'' + NewPplObj(1)")
  assertSyntaxError(&ErrMsgOp, "'1' + NewPplObj(1)")
  
  assertSyntaxError(&ErrMsgOp, 'SI + 1')
  assertSyntaxError(&ErrMsgOp, '1 + SI')
  
  assertSyntaxError(&ErrMsgOp, "Dbl(1) + '1'")
  assertSyntaxError(&ErrMsgOp, "Dbl(1) + 'foo'")
  assertSyntaxError(&ErrMsgOp, "Dbl(1) + 'NaN'")
  assertSyntaxError(&ErrMsgOp, "Dbl(1) + ''")
  
  assertSyntaxError(&ErrMsgOp, 'SI + Dbl(1)')
  assertSyntaxError(&ErrMsgOp, 'Dbl(1) + SI')
  
  assertSyntaxError(&ErrMsgOp, "'1' + 1")
  assertSyntaxError(&ErrMsgOp, "'1' + '1'")
  assertSyntaxError(&ErrMsgOp, "'1.1' + 1.1")
  assertSyntaxError(&ErrMsgOp, "'1' + SI")
  
  
  assertEq(&fechaPplObj, Fecha('01/01/2020') + 1)
  assertEq(Fecha('02/01/2020'), Fecha('01/01/2020') + 1)
  
  assertEq(84040, Fecha('31/01/2015') + Fecha('01/01/2015'))
  
  assertEq(0, Echo(&datetime.get_Hour))
  
  &datetime2 := &datetime + 1.5
  ** En V6 retorna el tipo de datos del termino izquierdo.
  #ifdef V6
  assertEq(Fecha('03/01/2020'), Echo(&datetime2.get_Date))
  assertEq(12, Echo(&datetime2.get_Hour))
  &datetime2 := &datetime2 + 0.6
  assertEq(Fecha('04/01/2020'), Echo(&datetime2.get_Date))
  #endif
  
  &datetime3 := 1.5 + &datetime
  assertEq(43833.5, &datetime3)
  assertEq('12:00:00',Hora(&datetime3))
  
  &datetime3 := 1 + &datetime
  assertEq(43833, Echo(&datetime3))
  assertEq('00:00:00',Hora(&datetime3))
  
  ** No toma la property Hour
  *assertEq('12',Fecha(&datetime3).get_Hour)
  *assertEq('12',Dat(&datetime3).get_Hour)
  
  #ifdef V7
  assertSyntaxError(&ErrMsgOp, "&datetime + '1'")
  assertSyntaxError(&ErrMsgOp, "'1' + &datetime")
  #endif
  
  assertSyntaxError(&ErrMsgOp, "Fecha('31/01/2015') + '1'")
  
  assertSyntaxError(&ErrMsgOp, "SI + Fecha('31/01/2015')")
  assertSyntaxError(&ErrMsgOp, "Fecha('31/01/2015') + SI")
  
  * En V6: No fue posible encontrar el metodo System.Double.get_hour()
  * En V7: No se encontraron candidatos para System.Double hour
  assertError('System.Double', -> Echo(&datetime3.get_Hour))
  
  assertEq(0, Val(Z:1) + DbNull)
  assertEq(0, Val(Z:1) + Nil)
  assertEq(1, Val(Z:1) + 1)
  assertEq(0, NewFbnObj(DbNull) + DbNull)
  assertEq(0, NewFbnObj(DbNull) + Nil)
  assertEq(1, NewFbnObj(DbNull) + 1)
  assertEq(1, NewFbnObj('str')    + 1)
  assertEq(0, DbNull   + NewFbnObj(DbNull))
  assertEq(0, Nil      + NewFbnObj(DbNull))
  assertEq(1, 1        + NewFbnObj(DbNull))
  assertEq(5, 5        + NewFbnObj('str'))
  assertEq(5, 5        + NewValObj('5'))
  assertEq(5, NewValObj('5')    + 5)
  assertEq(1, NewFbnObj(1)      + NewFbnObj(DbNull))
  assertEq(1, NewFbnObj(DbNull) + NewFbnObj(1))
  assertEq(1, NewFbnObj('str')  + NewFbnObj(1))
  assertEq(2, NewFbnObj('1')    + NewFbnObj(1))
  
  assertEq(1,   1 + NewValObj('str'))
  assertEq(1,   1 + NewValObj('1.5'))
  assertEq(1,   1 + NewFbnObj('str'))
  assertEq(2.5, 1 + NewFbnObj('1.5'))
  assertEq(1,   NewValObj('str') + 1)
  assertEq(1,   NewValObj('1.5') + 1)
  assertEq(1,   NewFbnObj('str') + 1)
  assertEq(2.5, NewFbnObj('1.5') + 1)
  
  assertEq(2, Echo_Int64(1) + 1)
  assertEq(2, 1 + Echo_Int64(1))
})
