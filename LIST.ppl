*&cero := NewPPLObj(0)
*&uno := NewPPLObj(1)
*&dos := NewPPLObj(2)
*&tres := NewPPLObj(3)
*ACN(A:1,0)
*ACN(A:2,1)
*ACN(A:3,2)
*ACN(A:4,3)
*ACN(A:5,4)
*
*test("list add", -> {
*    &lista := ||
*    &lista.add('HOLA')
*    &lista.add(1)
*    &lista.add(&dos)
*    &lista.add(Val(A:4))
*    
*    assertEq('HOLA', &lista.itemAt(0))
*    assertEq(1, &lista.itemAt(1))
*    assertEq(2, &lista.itemAt(2))
*    assertEq(3, &lista.itemAt(3))
*})
*
*test("list itemAt", -> {
*    &lista1 := |'HOLA',2,3|
*    &lista2 := list(2,3,5,7)
*    
*    assertEq('HOLA', &lista1.itemAt(0))
*    assertEq('HOLA', &lista1.itemAt(Num('0')))
*    assertEq('HOLA', &lista1.itemAt(&cero))
*    assertEq('HOLA', &lista1.itemAt(Val(A:1)))
*    assertEq(3, &lista1.itemAt(2))
*    assertEq(3, &lista1.itemAt(Num('2')))
*    assertEq(3, &lista1.itemAt(Val(A:3)))
*    assertEq(NULL, &lista1.itemAt(3))
*    assertEq(2, &lista2.itemAt(0))
*    assertEq(7, &lista2.itemAt(3))
*    assertEq(NULL, &lista2.itemAt(4))
*})
*
*test("list indexOf", -> {
*    &lista1 := |1,2,3,'HOLA'|
*    &lista2 := list(2,3,5,7)
*    
*    assertEq(2, &lista1.indexOf(3))
*    assertEq(2, &lista1.indexOf(&tres))
*    assertEq(2, &lista1.indexOf(Val(A:4)))
*    assertEq(3, &lista1.indexOf('HOLA'))
*    assertEq(-1, &lista1.indexOf(4))
*    assertEq(-1, &lista1.indexOf('HOLA '))
*    assertEq(-1, &lista1.indexOf(&cero))
*    assertEq(-1, &lista1.indexOf(Val(A:1)))
*    
*    &lista1.removeAt(0)
*    assertEq(1, &lista1.indexOf(3))
*    
*    &lista1.insertAt(0,1)
*    &lista1.removeAt(&uno)
*    assertEq(1, &lista1.indexOf(3))
*    
*    assertEq(2, &lista2.indexOf(5))
*    assertEq(-1, &lista2.indexOf(6))
*})
*
*test("list InsertAt", -> {
*    &lista1 := |1,2,3|
*    &lista2 := list(2,3,5,7)
*    &lista3 := |'HOLA'|
*    
*    &lista1.insertAt(3,4)
*    &lista2.insertAt(4,6)
*    
*    assertEq(4, &lista1.itemAt(3))
*    assertEq(6, &lista2.itemAt(4))
*    
*    &lista1.removeAt(&tres)
*    &lista1.insertAt(&tres,4)
*    
*    assertEq(4, &lista1.itemAt(&tres))
*    
*    &lista1.insertAt(Val(A:5),5)
*    assertEq(5, &lista1.itemAt(4))
*    
*    &lista3.insertAt(&uno,'CHAU')
*    
*    &string := '!!!'
*    &lista3.insertAt(&dos,&string)
*    
*    assertEq('HOLA', &lista3.itemAt(&cero))
*    assertEq('CHAU', &lista3.itemAt(&uno))
*    assertEq(&string, &lista3.itemAt(&dos))
*})
*
*test("list RemoveAt", -> {
*    &lista1 := |1,2,3|
*    &lista2 := list(2,3,5,7)
*    
*    &lista1.removeAt(1)
*    &lista2.removeAt(2)
*    
*    assertEq(3, &lista1.itemAt(1))
*    assertEq(3, &lista1.itemAt(&uno))
*    assertEq(7, &lista2.itemAt(2))
*    
*    &lista1.insertAt(2,4)
*    &lista1.insertAt(3,5)
*    &lista1.removeAt(&tres)
*    &lista1.removeAt(Val(A:3))
*    
*    assertEq(NULL, &lista1.itemAt(2))
*    assertEq(NULL, &lista1.itemAt(3))
*})
*
*test("list ReplaceAt", -> {
*    &lista1 := |1,2,3|
*    &lista2 := list(2,3,5,7)
*    &lista3 := |'','CHAU'|
*    
*    &lista1.replaceAt(1,4)
*    &lista2.replaceAt(2,6)
*    
*    assertEq(4, &lista1.itemAt(1))
*    assertEq(6, &lista2.itemAt(2))
*    
*    &lista3.replaceAt(&cero,'HO HO HOOOLA')
*    
*    assertEq('HO HO HOOOLA', &lista3.itemAt(&cero))
*    assertEq('CHAU', &lista3.itemAt(&uno))
*    
*    &hola := 'HOLA'
*    &lista3.replaceAt(&cero, &hola)
*    &lista3.replaceAt(Val(A:2), 'CHAU !!!')
*    
*    assertEq('HOLA', &lista3.itemAt(0))
*    assertEq('CHAU !!!', &lista3.itemAt(1))
*})
*
*test("list count", -> {
*    &lista := ||
*    
*    assertEq(0, &lista.count)
*    assertEq(0, &lista.count())
*    
*    &lista.add('HOLA')
*    assertEq(1, &lista.count)
*    assertEq(1, &lista.count())
*    
*    &lista.add('CHAU')
*    assertEq(2, &lista.count)
*    assertEq(2, &lista.count())
*    
*    &lista.RemoveAt(1)
*    assertEq(1, &lista.count)
*    assertEq(1, &lista.count())
*})
*
*test("list recorrer&i", -> {
*    &lista := |1,2,3|
*    recorrer&i 0, 2
*        assertEq(&i+1, &lista.itemAt(&i))
*    proximo
*})
*
*test("list addRange", -> {
*    &lista1 := |1,2,3|
*    &lista2 := |4,5,6|
*    
*    &lista1.AddRange(&lista2)
*
*    recorrer&i 0, 5
*      assertEq(&i+1, &lista1.itemAt(&i))
*    proximo
*    
*    &lista3 := ||
*    
*    &lista3.AddRange(&lista1)
*    &lista3.AddRange(&lista2)
*    
*    assertEq(9, &lista3.Count())
*    assertEq(6, &lista3.ItemAt(5))
*    assertEq(6, &lista3.ItemAt(8))
*})
*
*test("list matriz", -> {
*    &lista1 := |1,2,3|
*    &lista2 := |4,5,6,7|
*    &matriz := ||
*    
*    &matriz.Add(&lista1)
*    &matriz.Add(&lista2)
*    
*    assertEq(2, &matriz.Count())
*    assertEq(3, &matriz.ItemAt(0).Count())
*    assertEq(4, &matriz.ItemAt(1).Count())
*    assertEq(3, &matriz.ItemAt(0).ItemAt(2))
*    assertEq(7, &matriz.ItemAt(1).ItemAt(3))
*})
*
*test("list errors", ->{
*    &lista := |1,2,3|
*    
*    assertError('El item a agregar no puede ser NULL o vacio.', -> {
*        &lista.Add(NULL)
*    })
*    
*    assertError('El indice no puede ser NULL o vacio.', -> {
*        &lista.ItemAt(NULL)
*    })
*    assertError('El indice no puede ser NULL o vacio.', -> {
*        &lista.ItemAt('')
*    })
*    
*    assertError('El item no puede ser NULL o vacio.', -> {
*        &lista.IndexOf(NULL)
*    })
*    assertError('El item no puede ser NULL o vacio.', -> {
*        &lista.IndexOf('')
*    })
*    
*    assertError('El indice no puede ser NULL o vacio.', -> {
*        &lista.InsertAt(NULL,4)
*    })
*    assertError('El indice no puede ser NULL o vacio.', -> {
*        &lista.InsertAt('',4)
*    })
*    
*    assertError('El indice no puede ser NULL o vacio.', -> {
*        &lista.RemoveAt(NULL)
*    })
*    assertError('El indice no puede ser NULL o vacio.', -> {
*        &lista.RemoveAt('')
*    })
*    
*    assertError('El indice no puede ser NULL o vacio.', -> {
*        &lista.ReplaceAt(NULL,4)
*    })
*    assertError('El indice no puede ser NULL o vacio.', -> {
*        &lista.ReplaceAt('',4)
*    })
*    
*    assertError('AddRange debe recibir una lista.', -> {
*        &lista.AddRange(NULL)
*    })
*    assertError('AddRange debe recibir una lista.', -> {
*        &lista.AddRange('')
*    })
*    assertError('AddRange debe recibir una lista.', -> {
*        &lista.AddRange(1)
*    })
*    assertError('AddRange debe recibir una lista.', -> {
*        &lista.AddRange(&uno)
*    })
*    assertError('AddRange debe recibir una lista.', -> {
*        &lista.AddRange(Val(A:2))
*    })
*})
*
*test("list pipe2List", -> {
*    &lista1 := Pipe2List('1|2|3|')
*    recorrer&i 0, 2
*      assertEq(FStr(&i+1,0,0), &lista1.itemAt(&i))
*    proximo
*    assertEq(3, &lista1.count)
*    
*    &lista2 := Pipe2List()
*    assertEq(0, &lista2.count)
*    
*    &lista3 := Pipe2List('HOLA|10|CHAU|')
*    assertEq('HOLA', &lista3.itemAt(0))
*    assertEq(FStr(10,0,0), &lista3.itemAt(1))
*    assertEq('CHAU', &lista3.itemAt(2))
*})

test("list errors", ->{
    &lista := |1,2,3|
    assertError('El item a agregar no puede ser NULL o vacio.', -> {
        &lista.Add(NULL)
    })
    
    assertError('El indice no puede ser NULL o vacio.', -> {
        &lista.ItemAt(NULL)
    })
    assertError('El indice no puede ser NULL o vacio.', -> {
        &lista.ItemAt('')
    })
    
    assertError('El item no puede ser NULL o vacio.', -> {
        &lista.IndexOf(NULL)
    })
    assertError('El item no puede ser NULL o vacio.', -> {
        &lista.IndexOf('')
    })
    
    assertError('El indice no puede ser NULL o vacio.', -> {
        &lista.InsertAt(NULL,4)
    })
    assertError('El indice no puede ser NULL o vacio.', -> {
        &lista.InsertAt('',4)
    })
    
    assertError('El indice no puede ser NULL o vacio.', -> {
        &lista.RemoveAt(NULL)
    })
    assertError('El indice no puede ser NULL o vacio.', -> {
        &lista.RemoveAt('')
    })
    
    assertError('El indice no puede ser NULL o vacio.', -> {
        &lista.ReplaceAt(NULL,4)
    })
    assertError('El indice no puede ser NULL o vacio.', -> {
        &lista.ReplaceAt('',4)
    })
    
    assertError('AddRange debe recibir una lista.', -> {
        &lista.AddRange(NULL)
    })
    assertError('AddRange debe recibir una lista.', -> {
        &lista.AddRange('')
    })
    assertError('AddRange debe recibir una lista.', -> {
        &lista.AddRange(1)
    })
    assertError('AddRange debe recibir una lista.', -> {
        &lista.AddRange(&uno)
    })
    assertError('AddRange debe recibir una lista.', -> {
        &lista.AddRange(Val(A:2))
    })
})