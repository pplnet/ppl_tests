&cero := NewPPLObj(0)
&uno := NewPPLObj(1)
&dos := NewPPLObj(2)
&tres := NewPPLObj(3)
ACN(A:1,0)
ACN(A:2,1)
ACN(A:3,2)
ACN(A:4,3)

test("list add", -> {
    &lista := ||
    &lista.add('HOLA')
    &lista.add(1)
    &lista.add(&dos)
    &lista.add(Val(A:4))
    
    assertEq('HOLA', &lista.itemAt(0))
    assertEq(1, &lista.itemAt(1))
    assertEq(2, &lista.itemAt(2))
    assertEq(3, &lista.itemAt(3))
})

test("list itemAt", -> {
    &lista1 := |'HOLA',2,3|
    &lista2 := list(2,3,5,7)
    
    assertEq('HOLA', &lista1.itemAt(0))
    assertEq('HOLA', &lista1.itemAt(Num('0')))
    assertEq('HOLA', &lista1.itemAt(&cero))
    assertEq('HOLA', &lista1.itemAt(Val(A:1)))
    assertEq(3, &lista1.itemAt(2))
    assertEq(3, &lista1.itemAt(Num('2')))
    assertEq(3, &lista1.itemAt(Val(A:3)))
    assertEq(NULL, &lista1.itemAt(3))
    assertEq(2, &lista2.itemAt(0))
    assertEq(7, &lista2.itemAt(3))
    assertEq(NULL, &lista2.itemAt(4))
})

test("list indexOf", -> {
    &lista1 := |1,2,3,'HOLA'|
    &lista2 := list(2,3,5,7)
    
    assertEq(2, &lista1.indexOf(3))
    assertEq(2, &lista1.indexOf(&tres))
    assertEq(3, &lista1.indexOf('HOLA'))
    assertEq(-1, &lista1.indexOf(4))
    assertEq(-1, &lista1.indexOf('HOLA '))
    
    &lista1.removeAt(1)
    assertEq(1, &lista1.indexOf(3))
    
    &lista1.insertAt(0,1)
    &lista1.removeAt(&uno)
    assertEq(1, &lista1.indexOf(3))
    
    assertEq(2, &lista2.indexOf(5))
    assertEq(-1, &lista2.indexOf(6))
})

test("list InsertAt", -> {
    &lista1 := |1,2,3|
    &lista2 := list(2,3,5,7)
    &lista3 := |'HOLA'|
    
    &lista1.insertAt(3,4)
    &lista2.insertAt(4,6)
    
    assertEq(4, &lista1.itemAt(3))
    assertEq(6, &lista2.itemAt(4))
    
    &lista1.removeAt(&tres)
    &lista1.insertAt(&tres,4)
    
    assertEq(4, &lista1.itemAt(&tres))
    
    &lista3.insertAt(&uno,'CHAU')
    
    &string := '!!!'
    &lista3.insertAt(&dos,&string)
    
    assertEq('HOLA', &lista3.itemAt(&cero))
    assertEq('CHAU', &lista3.itemAt(&uno))
    assertEq(&string, &lista3.itemAt(&dos))
})

test("list RemoveAt", -> {
    &lista1 := |1,2,3|
    &lista2 := list(2,3,5,7)
    
    &lista1.removeAt(1)
    &lista2.removeAt(2)
    
    assertEq(3, &lista1.itemAt(1))
    assertEq(3, &lista1.itemAt(&uno))
    assertEq(7, &lista2.itemAt(2))
})

test("list ReplaceAt", -> {
    &lista1 := |1,2,3|
    &lista2 := list(2,3,5,7)
    &lista3 := |'','CHAU'|
    
    &lista1.replaceAt(1,4)
    &lista2.replaceAt(2,6)
    
    assertEq(4, &lista1.itemAt(1))
    assertEq(6, &lista2.itemAt(2))
    
    &lista3.replaceAt(&cero,'HO HO HOOOLA')
    
    assertEq('HO HO HOOOLA', &lista3.itemAt(&cero))
    assertEq('CHAU', &lista3.itemAt(&uno))
    
    &hola := 'HOLA'
    &lista3.replaceAt(&cero, &hola)
})

test("list for in", -> {
    &lista  := |1,2,3|
    &lista2 := |'HOLA','QUE','TAL'|
    &lista3 := |&cero,&uno,&dos|
    
    &counter := 0
    for &val in &lista
        assertEq(&lista.itemAt(&counter), &val)
        &counter := &counter + 1
    end
    
    &counter := 0
    for &val in &lista2
        assertEq(&lista2.itemAt(&counter), &val)
        &counter := &counter + 1
    end
    
    &counter := 0
    for &val in &lista3
        assertEq(&lista3.itemAt(&counter), &val)
        &counter := &counter + 1
    end
})

test("list recorrer&i", -> {
    &lista := |1,2,3|
    recorrer&i 0, 2
        assertEq(&i+1, &lista.itemAt(&i))
    proximo
})


test("list addRange", -> {
    &lista1 := |1,2,3|
    &lista2 := |4,5,6|
    
    &lista1.AddRange(&lista2)

    recorrer&i 0, 5
      assertEq(&i+1, &lista1.itemAt(&i))
    proximo
    
    &lista3 := ||
    
    &lista3.AddRange(&lista1)
    &lista3.AddRange(&lista2)
    
    assertEq(9, &lista3.Count())
    assertEq(6, &lista3.ItemAt(5))
    assertEq(6, &lista3.ItemAt(8))
})


test("list matriz", -> {
    &lista1 := |1,2,3|
    &lista2 := |4,5,6,7|
    &matriz := ||
    
    &matriz.Add(&lista1)
    &matriz.Add(&lista2)
    
    assertEq(2, &matriz.Count())
    assertEq(3, &matriz.ItemAt(0).Count())
    assertEq(4, &matriz.ItemAt(1).Count())
    assertEq(3, &matriz.ItemAt(0).ItemAt(2))
    assertEq(7, &matriz.ItemAt(1).ItemAt(3))
})

