&uno := NewPPLObj(1)

test("list itemAt", -> {
    let &lista1 |1,2,3|
    let &lista2 list(2,3,5,7)
*    &lista1 := |1,2,3|
*    &lista2 := list(2,3,5,7)
    
    assertEq(1, &lista1.itemAt(0))
    assertEq(3, &lista1.itemAt(2))
    assertEq(NULL, &lista1.itemAt(3))
    assertEq(2, &lista2.itemAt(0))
    assertEq(7, &lista2.itemAt(3))
    assertEq(NULL, &lista2.itemAt(4))
})

test("list indexOf", -> {
    let &lista1 |1,2,3|
    let &lista2 list(2,3,5,7)
*    &lista1 := |1,2,3|
*    &lista2 := list(2,3,5,7)
    
    assertEq(2, &lista1.indexOf(3))
    assertEq(-1, &lista1.indexOf(4))
    
    &lista1.removeAt(1)
   &lista1.removeAt(&uno)
    assertEq(1, &lista1.indexOf(3))
    
    assertEq(2, &lista2.indexOf(5))
    assertEq(-1, &lista2.indexOf(6))
})

test("list InsertAt", -> {
    let &lista1 |1,2,3|
    let &lista2 list(2,3,5,7)
*    &lista1 := |1,2,3|
*    &lista2 := list(2,3,5,7)
    
    &lista1.insertAt(3,4)
    &lista2.insertAt(4,6)
    
    assertEq(4, &lista1.itemAt(3))
    assertEq(6, &lista2.itemAt(4))
})

test("list RemoveAt", -> {
    let &lista1 |1,2,3|
    let &lista2 list(2,3,5,7)
*    &lista1 := |1,2,3|
*    &lista2 := list(2,3,5,7)
    
    &lista1.removeAt(1)
    &lista2.removeAt(2)
    
    assertEq(3, &lista1.itemAt(1))
    assertEq(3, &lista1.itemAt(&uno))
    assertEq(7, &lista2.itemAt(2))
})

test("list ReplaceAt", -> {
    let &lista1 |1,2,3|
    let &lista2 list(2,3,5,7)
*    &lista1 := |1,2,3|
*    &lista2 := list(2,3,5,7)
    
    &lista1.replaceAt(1,4)
    &lista2.replaceAt(2,6)
    
    assertEq(4, &lista1.itemAt(1))
    assertEq(6, &lista2.itemAt(2))
})

test("list for in", -> {
    let &lista |1,2,3|
    let &counter 0
    for &val in &lista
        assertEq(&lista.itemAt(&counter), &val)
        let &counter &counter + 1
    end
})
