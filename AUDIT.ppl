*Ignore=V7

def getAuditChanges(src)
    **// &campos := ${}
    &campos := NewDictionary()
    &old := SI
    XML.Iniciar()
    XML.Cargar(src)
    RecorrerXML("//c")
        for &nombre_campo in XML.Nodos()
            if &campos.Contains(&nombre_campo)
                &campo := &campos.Get(&nombre_campo)
            else
                &campo := NewDictionary()
            endif
            &campo.Add(iif(&old = SI, "old", "new"), XML.FBN(&nombre_campo))
            &campos.Add(&nombre_campo, &campo)
        end
        &old := NO
    Proximo
    return &campos
end

&xml := @"
    <c>
        <Observaciones></Observaciones>
    </c>
    <c>
        <Mercado>OCT</Mercado>
        <FechaOp>2021-03-25 00:00:00</FechaOp>
        <MB1>0</MB1>
        <Observaciones>foo</Observaciones>
    </c>"

** El objetivo es que la funcion getAuditChanges() transforme 
** el xml anterior a un PPLDic que contenga PPLDic en sus valores
** con la siguiente estructura:

** ${
**     Observaciones: ${
**         Old = '',
**         New = 'foo'
**     },
**     Mercado: ${
**         Old = null,
**         New = 'OCT'
**     },
**     FechaOp: ${
**         Old = null,
**         New = '2021-03-25 00:00:00'
**     },
**     MB1: ${
**         Old = null,
**         New = '0'
**     }
** }

    
test("funcion getAuditChanges", -> {
    &cambios := getAuditChanges(&xml)
    
    assertEq(4, &cambios.Count())
    
    &observaciones := &cambios.observaciones
    assertEq("", &observaciones.old)
    assertEq("foo", &observaciones.new)
    
    &mercado := &cambios.mercado
    assertEq(null, &mercado.old)
    assertEq("OCT", &mercado.new)
    
    &fechaop := &cambios.fechaop
    assertEq(null, &fechaop.old)
    assertEq("2021-03-25 00:00:00", &fechaop.new)
    
    &mb1 := &cambios.mb1
    assertEq(null, &mb1.old)
    assertEq("0", &mb1.new)
})