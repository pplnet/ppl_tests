*Preguntar por funciones 'Nil' y 'DbNull'
**********************
*ESCAPAR COMILLAS
**********************
test('Comillas', ->{
   assertEq("Probando 'comillas simples'", "Probando '" ~ "comillas simples'")
   *assertEq('Probando "comillas dobles"', 'Probando "' ~ 'comillas dobles"')
   assertEq("Probando 'concatenacion'", "Probando '" ~ "concatenacion" ~  "'")
   *assertEq('Probando escape de ''comillas''', "Probando escape de 'comillas'")
})


**********************
*ITEM LISTA
**********************

test('ItemLista', ->{
   assertEq('', ItemLista('A|B', 0))
   assertEq('A', ItemLista('A|B', 1))
   assertEq('B', ItemLista('A|B', 2))
   assertEq('', ItemLista('A|B', 3))
   assertEq('', ItemLista('', 1))
})

**********************
*INCLUIDO
**********************

test('Incluido', ->{
   assertEq(SI, Incluido('Item1','Item0|Item1|Item2'))
   assertEq(NO, Incluido('Item3','Item0|Item1|Item2'))
   assertEq(SI, Incluido('Item0','Item0'))
   assertEq(NO, Incluido('Item','Item0'))
   assertEq(NO, Incluido('Item','Item0|Item1'))
   assertEq(NO, Incluido("", '|||'))
   assertEq(NO, Incluido(" ", '|||'))
   assertEq(NO, Incluido("", 'Item0|||'))
   assertEq(NO, Incluido(" ", 'Item0|||'))
})


**********************
*COPY
**********************

test('Copy', ->{
   assertEq('123456789', Copy('123456789',1,9))
   assertEq('1',         Copy('123456789',1,1))
   assertEq('123456789', Copy('123456789',1,15))
   assertEq('',          Copy('123456789',0,0))
   assertEq('',          Copy('123456789',-1,0))
   assertEq('',          Copy('123456789',0,-1))
   assertEq('',          Copy('123456789',0,-1.0))
   assertEq('',          Copy('123456789',10,0))
   
   &fecha := Fecha('15/06/2016')
   assertEq('16', Copy(Fecha('15/06/2016'),9,4))
   assertEq('16', Copy(&fecha,9,4))
   
   assertEq('', Copy('',9,4))
})

**********************
*PAD0 / PAD / LPAD
**********************

test('Pad0', ->{
   assertEq('001', PAD0('1',3))
   assertEq('123', PAD0('123',3))
   assertEq('0010', PAD0('10',4))
   assertEq('000', PAD0('',3))
   *assertEq('000', PAD0(DbNull,3))
})

test('LPad', ->{
   assertEq('A'  , LPAD('A',0))
   assertEq('A'  , LPAD('A',1))
   assertEq(' A' , LPAD('A',2))
   assertEq('  A', LPAD('A',3))
})

test('Pad', ->{
   assertEq('A'  , PAD('A',0))
   assertEq('A'  , PAD('A',1))
   assertEq('A ' , PAD('A',2))
   assertEq('A  ', PAD('A',3))
})

**********************
*LTSTR
**********************

test('LTStr', ->{
   assertEq(NO, LTSTR('',''))
   assertEq(NO, LTSTR('a',''))
   assertEq(SI, LTSTR('','a'))
   assertEq(SI, LTSTR('a','aa'))
   assertEq(NO, LTSTR('aa','a'))
   assertEq(SI, LTSTR('a','b'))
   assertEq(NO, LTSTR('b','a'))
   assertEq(SI, LTSTR('0','1'))
   assertEq(SI, LTSTR('0','a'))
   assertEq(NO, LTSTR('1','00'))
})

**********************
*POSICION
**********************

test('Posicion', ->{
   assertEq(12, Posicion('Juan','La casa de Juan es grande'))
   assertEq( 0, Posicion('Juan','LA CASA DE JUAN ES GRANDE'))
   assertEq( 0, Posicion('Juan',''))
   assertEq( 0, Posicion('','La casa de Juan es grande'))
   assertEq( 0, Posicion('',''))
   assertEq( 0, Posicion('','foo'))
   assertEq( 0, Posicion('foo',''))
   assertEq( 1, Posicion('foo','foo'))
   assertEq( 1, Posicion('foo','foo', -1, -1))
   assertEq( 2, Posicion('foo',' foo'))
   assertEq( 1, Posicion('foo','foo', 1))
   assertEq( 2, Posicion('foo',' foo', 1))
   assertEq( 0, Posicion('foo','foo', 100))
   assertEq( 1, Posicion('foo','foo', 0))
   assertEq( 1, Posicion('foo','foo', 0, 0))
   assertEq( 0, Posicion('foo','foo', 1, 1))
   assertEq( 2, Posicion('foo',' foo', 1, 100))
   assertEq( 2, Posicion('foo',' foo', 1, 0))
   assertEq( 0, Posicion('foo','       foo',0,3))
   assertEq(12, Posicion('Juan','La casa de Juan es grande',11,22))
   assertEq(17, Posicion('Juan','Juan La casa de Juan es grande',11,22))
   assertEq(17, Posicion('Juan','Juan La casa de Juan es grande',11))
   assertEq( 0, Posicion('foo',' foo', 1, 4))
   assertEq( 2, Posicion('foo',' foo', 1, 5))
   assertEq( 0, Posicion('foo',' foo', 2, 4))
   assertEq( 2, Posicion('foo',' foo', 2, 5))
})