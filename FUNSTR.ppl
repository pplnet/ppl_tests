*Ignore=V7
test('EqStr', ->{
   assertEq(SI, Eqstr('foo', 'foo'))
   assertEq(NO, Eqstr('foo', 'FOO'))
   assertEq(NO, Eqstr('FOO', 'foo'))
   assertEq(NO, Eqstr('FoO', 'fOo'))
   assertEq(NO, Eqstr('foo', 'bar'))
   assertEq(NO, Eqstr('foo1', 'foo'))
   assertEq(NO, Eqstr('foo', 'foo1'))
   assertEq(SI, Eqstr('foo', 'fo'~'o'))
   
   &num1 := 1
   &num2 := 1
   assertEq(SI, Eqstr(&num1, &num2))
   
   &fecha := Fecha('01/01/2015')
   assertEq(SI, Eqstr('01/01/2015', &fecha))
   assertEq(SI, Eqstr(&fecha, '01/01/2015'))
   assertEq(SI, Eqstr(&fecha, NewFbnObj(Date(2015,1,1))))
   
   &string := '1'
   assertEq(SI, Eqstr(&string, '1'))
   assertEq(SI, Eqstr('1', &string))
})

test('EqStri', ->{
   assertEq(SI, Eqstri('foo', 'foo'))
   assertEq(SI, Eqstri('foo', 'FOO'))
   assertEq(SI, Eqstri('FOO', 'foo'))
   assertEq(SI, Eqstri('FoO', 'fOo'))
   assertEq(NO, Eqstri('foo', 'bar'))
   assertEq(NO, Eqstri('foo1', 'foo'))
   assertEq(NO, Eqstri('foo', 'foo1'))
   assertEq(SI, Eqstri('foo', 'fo'~'o'))
   
   &num1 := 1
   &num2 := 1
   assertEq(SI, Eqstri(&num1, &num2))
   
   &fecha := Fecha('01/01/2015')
   assertEq(SI, Eqstri('01/01/2015', &fecha))
   assertEq(SI, Eqstri(&fecha, '01/01/2015'))
   
   &string := '1'
   assertEq(SI, Eqstri(&string, '1'))
   assertEq(SI, Eqstri('1', &string))
})

&ErrorEqStrl := 'eqstrl'

test('EqStrl', ->{
   assertEq(SI, Eqstrl('foo', 'foo', 3))
   assertEq(NO, Eqstrl('foo', 'FOO', 3))
   assertEq(NO, Eqstrl('FOO', 'foo', 3))
   assertEq(NO, Eqstrl('FoO', 'fOo', 3))
   assertEq(SI, Eqstrl('foo1', 'foo', 3))
   assertEq(NO, Eqstrl('foo2', 'foo', 4))
   assertEq(SI, Eqstrl('foo2', 'foo1', 3.9))
   
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl('~'foo'~', 1, 1)')
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl('~'foo'~', 1.1, 1)')
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl('~'foo'~', SI, 1)')
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl('~'foo'~', date(2012, 05, 14), 1)')
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl(1, '~'foo'~', 1)')
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl(1.1, '~'foo'~', 1)')
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl(SI, '~'foo'~', 1)')
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl(date(2014, 05, 14), '~'foo'~', 1)')
   assertSyntaxError(&ErrorEqStrl, 'Eqstrl('~'foo'~', '~'foo'~', '~'1'~')')
})

test('EqStrli', ->{
   assertEq(SI, Eqstrli('foo', 'foo', 3))
   assertEq(SI, Eqstrli('foo', 'FOO', 3))
   assertEq(SI, Eqstrli('FOO', 'foo', 3))
   assertEq(SI, Eqstrli('FoO', 'fOo', 3))
   assertEq(SI, Eqstrli('foo1', 'foo', 3))
   assertEq(NO, Eqstrli('foo2', 'foo', 4))
   assertEq(SI, Eqstrli('foo2', 'foo1', 3.9))
})

test('ItemLista', ->{
   assertEq('', ItemLista('A|B', 0))
   assertEq('A', ItemLista('A|B', 1))
   assertEq('B', ItemLista('A|B', 2))
   assertEq('', ItemLista('A|B', 3))
   assertEq('', ItemLista('', 1))
})

test('Elementos', ->{
   assertEq(0, Elementos(''))
   assertEq(0, Elementos('|'))
   assertEq(1, Elementos('||'))
   assertEq(1, Elementos('a|'))
   assertEq(1, Elementos('|a'))
   assertEq(1, Elementos(' '))
   assertEq(2, Elementos(' | '))
   assertEq(2, Elementos('a| '))
   assertEq(2, Elementos(' |a'))
})

test('Copy', ->{
   assertEq('123456789', Copy('123456789',1,9))
   assertEq('1',         Copy('123456789',1,1))
   assertEq('123456789', Copy('123456789',1,15))
   assertEq('',          Copy('123456789',0,0))
   assertEq('',          Copy('123456789',-1,0))
   assertEq('',          Copy('123456789',0,-1))
   assertEq('',          Copy('123456789',0,-1.0))
   assertEq('',          Copy('123456789',10,0))
   
   &fecha := Fecha('15/06/2016')
   assertEq('16', Copy(Fecha('15/06/2016'),9,4))
   assertEq('16', Copy(&fecha,9,4))
   
   assertEq('', Copy(Nil,9,4))
})

test('Pad0', ->{
   assertEq('001', PAD0('1',3))
   assertEq('123', PAD0('123',3))
   assertEq('000', PAD0(Nil,3))
   assertEq('000', PAD0(DbNull,3))
})

test('LPad', ->{
   assertEq('A'  , LPAD('A',0))
   assertEq('A'  , LPAD('A',1))
   assertEq(' A' , LPAD('A',2))
   assertEq('  A', LPAD('A',3))
})

test('LTStr', ->{
   assertEq(NO, LTSTR('',''))
   assertEq(NO, LTSTR('a',''))
   assertEq(SI, LTSTR('','a'))
   assertEq(SI, LTSTR('a','aa'))
   assertEq(NO, LTSTR('aa','a'))
   assertEq(SI, LTSTR('a','b'))
   assertEq(NO, LTSTR('b','a'))
   assertEq(SI, LTSTR('0','1'))
   assertEq(SI, LTSTR('0','a'))
   assertEq(NO, LTSTR('1','00'))
})

test('Posicion', ->{
   assertEq(12, Posicion('Juan','La casa de Juan es grande'))
   assertEq( 0, Posicion('Juan','LA CASA DE JUAN ES GRANDE'))
   assertEq( 0, Posicion('Juan',''))
   assertEq( 0, Posicion('','La casa de Juan es grande'))
   assertEq( 0, Posicion('',''))
   assertEq( 0, Posicion('','foo'))
   assertEq( 0, Posicion('foo',''))
   assertEq( 1, Posicion('foo','foo'))
   assertEq( 1, Posicion('foo','foo', -1, -1))
   assertEq( 2, Posicion('foo',' foo'))
   assertEq( 1, Posicion('foo','foo', 1))
   assertEq( 2, Posicion('foo',' foo', 1))
   assertEq( 0, Posicion('foo','foo', 100))
   assertEq( 1, Posicion('foo','foo', 0))
   assertEq( 1, Posicion('foo','foo', 0, 0))
   assertEq( 0, Posicion('foo','foo', 1, 1))
   assertEq( 2, Posicion('foo',' foo', 1, 100))
   assertEq( 2, Posicion('foo',' foo', 1, 0))
   assertEq( 0, Posicion('foo','       foo',0,3))
   assertEq(12, Posicion('Juan','La casa de Juan es grande',11,22))
   assertEq(17, Posicion('Juan','Juan La casa de Juan es grande',11,22))
   assertEq(17, Posicion('Juan','Juan La casa de Juan es grande',11))
   assertEq( 0, Posicion('foo',' foo', 1, 4))
   assertEq( 2, Posicion('foo',' foo', 1, 5))
   assertEq( 0, Posicion('foo',' foo', 2, 4))
   assertEq( 2, Posicion('foo',' foo', 2, 5))
})

test('Buscar', ->{
   assertEq(NO, Buscar('',''))
   assertEq(NO, Buscar('a',''))
   assertEq(NO, Buscar('','a'))
   assertEq(SI, Buscar('a','aa'))
   assertEq(NO, Buscar('aa','a'))
   assertEq(NO, Buscar('a','b'))
   assertEq(NO, Buscar('b','a'))
   assertEq(NO, Buscar('0','1'))
   assertEq(NO, Buscar('0','a'))
   assertEq(NO, Buscar('1','00'))
   assertEq(NO, Buscar('12','0102'))
   assertEq(SI, Buscar('12','0120'))
   assertEq(NO, Buscar('hola','chau'))
   assertEq(SI, Buscar('hola','holachau'))
   assertEq(NO, Buscar('hola ','holachau'))
   assertEq(SI, Buscar('hola ','hola chau'))
})
